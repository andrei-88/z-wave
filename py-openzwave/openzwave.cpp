/* Generated by Cython 0.15.1 on Mon Jun 18 22:26:03 2012 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__openzwave
#define __PYX_HAVE_API__openzwave
#include <utility>
#include <map>
#include <string>
#include "stdlib.h"
#include "Options.h"
#include "Notification.h"
#include "ValueID.h"
#include "Manager.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "openzwave.pyx",
};

/* "openzwave.pyx":15
 *     void free(void* ptr)
 * 
 * ctypedef unsigned int uint32             # <<<<<<<<<<<<<<
 * ctypedef int int32
 * ctypedef int int16
 */
typedef unsigned int __pyx_t_9openzwave_uint32;

/* "openzwave.pyx":16
 * 
 * ctypedef unsigned int uint32
 * ctypedef int int32             # <<<<<<<<<<<<<<
 * ctypedef int int16
 * ctypedef unsigned char uint8
 */
typedef int __pyx_t_9openzwave_int32;

/* "openzwave.pyx":17
 * ctypedef unsigned int uint32
 * ctypedef int int32
 * ctypedef int int16             # <<<<<<<<<<<<<<
 * ctypedef unsigned char uint8
 * 
 */
typedef int __pyx_t_9openzwave_int16;

/* "openzwave.pyx":18
 * ctypedef int int32
 * ctypedef int int16
 * ctypedef unsigned char uint8             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Options.h" namespace "OpenZWave":
 */
typedef unsigned char __pyx_t_9openzwave_uint8;

/*--- Type declarations ---*/
struct __pyx_obj_9openzwave_PyManager;
struct __pyx_obj_9openzwave_PyOptions;

/* "openzwave.pyx":97
 *         uint8 GetByte()
 * 
 * ctypedef void (*pfnOnNotification_t)(const_notification _pNotification, void* _context )             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Manager.h" namespace "OpenZWave":
 */
typedef void (*__pyx_t_9openzwave_pfnOnNotification_t)(OpenZWave::Notification const*, void *);

/* "openzwave.pyx":324
 * 
 * 
 * cdef class PyManager:             # <<<<<<<<<<<<<<
 *     '''
 * The main public interface to OpenZWave.
 */
struct __pyx_obj_9openzwave_PyManager {
  PyObject_HEAD
  OpenZWave::Manager *manager;
  PyObject *_watcherCallback;
};


/* "openzwave.pyx":210
 *     Manager* Get()
 * 
 * cdef class PyOptions:             # <<<<<<<<<<<<<<
 *     cdef Options *options
 * 
 */
struct __pyx_obj_9openzwave_PyOptions {
  PyObject_HEAD
  OpenZWave::Options *options;
};


#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name)           __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

#ifndef __PYX_FORCE_INIT_THREADS
  #if PY_VERSION_HEX < 0x02040200
    #define __PYX_FORCE_INIT_THREADS 1
  #else
    #define __PYX_FORCE_INIT_THREADS 0
  #endif
#endif

#if PY_VERSION_HEX < 0x02050000
#ifndef PyAnySet_CheckExact

#define PyAnySet_CheckExact(ob) \
    ((ob)->ob_type == &PySet_Type || \
     (ob)->ob_type == &PyFrozenSet_Type)

#define PySet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PySet_Type, (iterable), NULL)

#define Pyx_PyFrozenSet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PyFrozenSet_Type, (iterable), NULL)

#define PySet_Size(anyset) \
    PyObject_Size((anyset))

#define PySet_Contains(anyset, key) \
    PySequence_Contains((anyset), (key))

#define PySet_Pop(set) \
    PyObject_CallMethod(set, (char *)"pop", NULL)

static CYTHON_INLINE int PySet_Clear(PyObject *set) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"clear", NULL);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Discard(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"discard", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Add(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"add", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

#endif /* PyAnySet_CheckExact (<= Py2.4) */

#if PY_VERSION_HEX < 0x02040000
#ifndef Py_SETOBJECT_H
#define Py_SETOBJECT_H

static PyTypeObject *__Pyx_PySet_Type = NULL;
static PyTypeObject *__Pyx_PyFrozenSet_Type = NULL;

#define PySet_Type (*__Pyx_PySet_Type)
#define PyFrozenSet_Type (*__Pyx_PyFrozenSet_Type)

#define PyAnySet_Check(ob) \
    (PyAnySet_CheckExact(ob) || \
     PyType_IsSubtype((ob)->ob_type, &PySet_Type) || \
     PyType_IsSubtype((ob)->ob_type, &PyFrozenSet_Type))

#define PyFrozenSet_CheckExact(ob) ((ob)->ob_type == &PyFrozenSet_Type)

static int __Pyx_Py23SetsImport(void) {
    PyObject *sets=0, *Set=0, *ImmutableSet=0;

    sets = PyImport_ImportModule((char *)"sets");
    if (!sets) goto bad;
    Set = PyObject_GetAttrString(sets, (char *)"Set");
    if (!Set) goto bad;
    ImmutableSet = PyObject_GetAttrString(sets, (char *)"ImmutableSet");
    if (!ImmutableSet) goto bad;
    Py_DECREF(sets);

    __Pyx_PySet_Type       = (PyTypeObject*) Set;
    __Pyx_PyFrozenSet_Type = (PyTypeObject*) ImmutableSet;

    return 0;

 bad:
    Py_XDECREF(sets);
    Py_XDECREF(Set);
    Py_XDECREF(ImmutableSet);
    return -1;
}

#else
static int __Pyx_Py23SetsImport(void) { return 0; }
#endif /* !Py_SETOBJECT_H */
#endif /* < Py2.4  */
#endif /* < Py2.5  */

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases); /*proto*/

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname); /*proto*/

#define __pyx_binding_PyCFunctionType_USED 1

typedef struct {
    PyCFunctionObject func;
} __pyx_binding_PyCFunctionType_object;

static PyTypeObject __pyx_binding_PyCFunctionType_type;
static PyTypeObject *__pyx_binding_PyCFunctionType = NULL;

static PyObject *__pyx_binding_PyCFunctionType_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module); /* proto */
#define __pyx_binding_PyCFunctionType_New(ml, self) __pyx_binding_PyCFunctionType_NewEx(ml, self, NULL)

static int __pyx_binding_PyCFunctionType_init(void); /* proto */

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename); /*proto*/

static int __Pyx_check_binary_version(void);

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'openzwave' */
static PyTypeObject *__pyx_ptype_9openzwave_PyOptions = 0;
static PyTypeObject *__pyx_ptype_9openzwave_PyManager = 0;
static std::map<__pyx_t_9openzwave_uint32,OpenZWave::ValueID> __pyx_v_9openzwave_values_map;
static PyObject *__pyx_f_9openzwave_addValueId(OpenZWave::ValueID, PyObject *); /*proto*/
static void __pyx_f_9openzwave_callback(OpenZWave::Notification const*, void *); /*proto*/
#define __Pyx_MODULE_NAME "openzwave"
int __pyx_module_is_main_openzwave = 0;

/* Implementation of 'openzwave' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static char __pyx_k_1[] = "call to AddWatcher failed";
static char __pyx_k_4[] = "A new node value has been added to OpenZWave's list. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented.";
static char __pyx_k_7[] = "A node value has been removed from OpenZWave's list.  This only occurs when a node is removed.";
static char __pyx_k_10[] = "A node value has been updated from the Z-Wave network.";
static char __pyx_k_13[] = "The associations for the node have changed. The application should rebuild any group information it holds about the node.";
static char __pyx_k_16[] = "A new node has been found (not already stored in zwcfg*.xml file)";
static char __pyx_k_19[] = "A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself.";
static char __pyx_k_22[] = "A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing.";
static char __pyx_k_25[] = "Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description.";
static char __pyx_k_28[] = "One of the node names has changed (name, manufacturer, product).";
static char __pyx_k_31[] = "A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification.";
static char __pyx_k_34[] = "Polling of a node has been successfully turned off by a call to Manager::DisablePoll";
static char __pyx_k_37[] = "Polling of a node has been successfully turned on by a call to Manager::EnablePoll";
static char __pyx_k_40[] = "A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods.";
static char __pyx_k_43[] = "All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications.";
static char __pyx_k_46[] = "The last message that was sent is now complete.";
static char __pyx_k_49[] = "The initialisation queries on a node have been completed.";
static char __pyx_k_52[] = "All awake nodes have been queried, so client application can expected complete data for these nodes.";
static char __pyx_k_55[] = "All nodes have been queried, so client application can expected complete data.";
static char __pyx_k_58[] = "The 'level' as controlled by basic commands.  Usually duplicated by another command class.";
static char __pyx_k_61[] = "Basic values an ordinary user would be interested in.";
static char __pyx_k_64[] = "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead.";
static char __pyx_k_67[] = "Values of significance only to users who understand the Z-Wave protocol";
static char __pyx_k_70[] = "Boolean, true or false";
static char __pyx_k_73[] = "8-bit unsigned value";
static char __pyx_k_76[] = "Represents a non-integer value as a string, to avoid floating point accuracy issues.";
static char __pyx_k_79[] = "32-bit signed value";
static char __pyx_k_82[] = "List from which one item can be selected";
static char __pyx_k_85[] = "Complex type used with the Climate Control Schedule command class";
static char __pyx_k_88[] = "16-bit signed value";
static char __pyx_k_91[] = "Text string";
static char __pyx_k_94[] = "A write-only value that is the equivalent of pressing a button to send a command to a device";
static char __pyx_k_96[] = "COMMAND_CLASS_NO_OPERATION";
static char __pyx_k_97[] = "COMMAND_CLASS_CONTROLLER_REPLICATION";
static char __pyx_k_98[] = "COMMAND_CLASS_APPLICATION_STATUS";
static char __pyx_k_99[] = "COMMAND_CLASS_ZIP_SERVICES";
static char __pyx_k__a[] = "a";
static char __pyx_k__b[] = "b";
static char __pyx_k__c[] = "c";
static char __pyx_k_100[] = "COMMAND_CLASS_ZIP_SERVER";
static char __pyx_k_101[] = "COMMAND_CLASS_SWITCH_BINARY";
static char __pyx_k_102[] = "COMMAND_CLASS_SWITCH_MULTILEVEL";
static char __pyx_k_103[] = "COMMAND_CLASS_SWITCH_ALL";
static char __pyx_k_104[] = "COMMAND_CLASS_SWITCH_TOGGLE_BINARY";
static char __pyx_k_105[] = "COMMAND_CLASS_SWITCH_TOGGLE_MULTILEVEL";
static char __pyx_k_106[] = "COMMAND_CLASS_CHIMNEY_FAN";
static char __pyx_k_107[] = "COMMAND_CLASS_SCENE_ACTIVATION";
static char __pyx_k_108[] = "COMMAND_CLASS_SCENE_ACTUATOR_CONF";
static char __pyx_k_109[] = "COMMAND_CLASS_SCENE_CONTROLLER_CONF";
static char __pyx_k_110[] = "COMMAND_CLASS_ZIP_CLIENT";
static char __pyx_k_111[] = "COMMAND_CLASS_ZIP_ADV_SERVICES";
static char __pyx_k_112[] = "COMMAND_CLASS_SENSOR_BINARY";
static char __pyx_k_113[] = "COMMAND_CLASS_SENSOR_MULTILEVEL";
static char __pyx_k_114[] = "COMMAND_CLASS_ZIP_ADV_SERVER";
static char __pyx_k_115[] = "COMMAND_CLASS_ZIP_ADV_CLIENT";
static char __pyx_k_116[] = "COMMAND_CLASS_METER_PULSE";
static char __pyx_k_117[] = "COMMAND_CLASS_METER_TBL_CONFIG";
static char __pyx_k_118[] = "COMMAND_CLASS_METER_TBL_MONITOR";
static char __pyx_k_119[] = "COMMAND_CLASS_METER_TBL_PUSH";
static char __pyx_k_120[] = "COMMAND_CLASS_THERMOSTAT_HEATING";
static char __pyx_k_121[] = "COMMAND_CLASS_THERMOSTAT_MODE";
static char __pyx_k_122[] = "COMMAND_CLASS_THERMOSTAT_OPERATING_STATE";
static char __pyx_k_123[] = "COMMAND_CLASS_THERMOSTAT_SETPOINT";
static char __pyx_k_124[] = "COMMAND_CLASS_THERMOSTAT_FAN_MODE";
static char __pyx_k_125[] = "COMMAND_CLASS_THERMOSTAT_FAN_STATE";
static char __pyx_k_126[] = "COMMAND_CLASS_CLIMATE_CONTROL_SCHEDULE";
static char __pyx_k_127[] = "COMMAND_CLASS_THERMOSTAT_SETBACK";
static char __pyx_k_128[] = "COMMAND_CLASS_DOOR_LOCK_LOGGING";
static char __pyx_k_129[] = "COMMAND_CLASS_SCHEDULE_ENTRY_LOCK";
static char __pyx_k_130[] = "COMMAND_CLASS_BASIC_WINDOW_COVERING";
static char __pyx_k_131[] = "COMMAND_CLASS_MTP_WINDOW_COVERING";
static char __pyx_k_132[] = "COMMAND_CLASS_MULTI_CHANNEL_V2";
static char __pyx_k_133[] = "COMMAND_CLASS_DOOR_LOCK";
static char __pyx_k_134[] = "COMMAND_CLASS_USER_CODE";
static char __pyx_k_135[] = "COMMAND_CLASS_CONFIGURATION";
static char __pyx_k_136[] = "COMMAND_CLASS_MANUFACTURER_SPECIFIC";
static char __pyx_k_137[] = "COMMAND_CLASS_POWERLEVEL";
static char __pyx_k_138[] = "COMMAND_CLASS_PROTECTION";
static char __pyx_k_139[] = "COMMAND_CLASS_NODE_NAMING";
static char __pyx_k_140[] = "COMMAND_CLASS_FIRMWARE_UPDATE_MD";
static char __pyx_k_141[] = "COMMAND_CLASS_GROUPING_NAME";
static char __pyx_k_142[] = "COMMAND_CLASS_REMOTE_ASSOCIATION_ACTIVATE";
static char __pyx_k_143[] = "COMMAND_CLASS_REMOTE_ASSOCIATION";
static char __pyx_k_144[] = "COMMAND_CLASS_BATTERY";
static char __pyx_k_145[] = "COMMAND_CLASS_WAKE_UP";
static char __pyx_k_146[] = "COMMAND_CLASS_ASSOCIATION";
static char __pyx_k_147[] = "COMMAND_CLASS_VERSION";
static char __pyx_k_148[] = "COMMAND_CLASS_INDICATOR";
static char __pyx_k_149[] = "COMMAND_CLASS_PROPRIETARY";
static char __pyx_k_150[] = "COMMAND_CLASS_LANGUAGE";
static char __pyx_k_151[] = "COMMAND_CLASS_TIME_PARAMETERS";
static char __pyx_k_152[] = "COMMAND_CLASS_GEOGRAPHIC_LOCATION";
static char __pyx_k_153[] = "COMMAND_CLASS_COMPOSITE";
static char __pyx_k_154[] = "COMMAND_CLASS_MULTI_INSTANCE_ASSOCIATION";
static char __pyx_k_155[] = "COMMAND_CLASS_MULTI_CMD";
static char __pyx_k_156[] = "COMMAND_CLASS_ENERGY_PRODUCTION";
static char __pyx_k_157[] = "COMMAND_CLASS_MANUFACTURER_PROPRIETARY";
static char __pyx_k_158[] = "COMMAND_CLASS_SCREEN_MD";
static char __pyx_k_159[] = "COMMAND_CLASS_SCREEN_ATTRIBUTES";
static char __pyx_k_160[] = "COMMAND_CLASS_SIMPLE_AV_CONTROL";
static char __pyx_k_161[] = "COMMAND_CLASS_AV_CONTENT_DIRECTORY_MD";
static char __pyx_k_162[] = "COMMAND_CLASS_AV_RENDERER_STATUS";
static char __pyx_k_163[] = "COMMAND_CLASS_AV_CONTENT_SEARCH_MD";
static char __pyx_k_164[] = "COMMAND_CLASS_SECURITY";
static char __pyx_k_165[] = "COMMAND_CLASS_AV_TAGGING_MD";
static char __pyx_k_166[] = "COMMAND_CLASS_IP_CONFIGURATION";
static char __pyx_k_167[] = "COMMAND_CLASS_ASSOCIATION_COMMAND_CONFIGURATION";
static char __pyx_k_168[] = "COMMAND_CLASS_SENSOR_ALARM";
static char __pyx_k_169[] = "COMMAND_CLASS_SILENCE_ALARM";
static char __pyx_k_170[] = "COMMAND_CLASS_SENSOR_CONFIGURATION";
static char __pyx_k_171[] = "COMMAND_CLASS_NON_INTEROPERABLE";
static char __pyx_k_172[] = "value added";
static char __pyx_k_173[] = "value removed";
static char __pyx_k_174[] = "value changed";
static char __pyx_k_175[] = "groups changed";
static char __pyx_k_176[] = "new node";
static char __pyx_k_177[] = "node added";
static char __pyx_k_178[] = "node removed";
static char __pyx_k_179[] = "node protocol info";
static char __pyx_k_180[] = "node naming";
static char __pyx_k_181[] = "node event";
static char __pyx_k_182[] = "polling disabled";
static char __pyx_k_183[] = "polling enabled";
static char __pyx_k_184[] = "driver ready";
static char __pyx_k_185[] = "driver reset";
static char __pyx_k_186[] = "message complete";
static char __pyx_k_187[] = "node queries complete";
static char __pyx_k_188[] = "awake nodes queried";
static char __pyx_k_189[] = "all nodes queried";
static char __pyx_k__id[] = "id";
static char __pyx_k__Int[] = "Int";
static char __pyx_k__doc[] = "doc";
static char __pyx_k__Bool[] = "Bool";
static char __pyx_k__Byte[] = "Byte";
static char __pyx_k__List[] = "List";
static char __pyx_k__User[] = "User";
static char __pyx_k__name[] = "name";
static char __pyx_k__self[] = "self";
static char __pyx_k__type[] = "type";
static char __pyx_k__Basic[] = "Basic";
static char __pyx_k__Group[] = "Group";
static char __pyx_k__Short[] = "Short";
static char __pyx_k__event[] = "event";
static char __pyx_k__genre[] = "genre";
static char __pyx_k__index[] = "index";
static char __pyx_k__label[] = "label";
static char __pyx_k__level[] = "level";
static char __pyx_k__param[] = "param";
static char __pyx_k__range[] = "range";
static char __pyx_k__units[] = "units";
static char __pyx_k__value[] = "value";
static char __pyx_k__Button[] = "Button";
static char __pyx_k__Config[] = "Config";
static char __pyx_k__String[] = "String";
static char __pyx_k__System[] = "System";
static char __pyx_k__homeId[] = "homeId";
static char __pyx_k__homeid[] = "homeid";
static char __pyx_k__nodeId[] = "nodeId";
static char __pyx_k__nodeid[] = "nodeid";
static char __pyx_k__setDoc[] = "setDoc";
static char __pyx_k__Decimal[] = "Decimal";
static char __pyx_k__NodeNew[] = "NodeNew";
static char __pyx_k____doc__[] = "__doc__";
static char __pyx_k__valueId[] = "valueId";
static char __pyx_k__PyGenres[] = "PyGenres";
static char __pyx_k__Schedule[] = "Schedule";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__groupIdx[] = "groupIdx";
static char __pyx_k__groupidx[] = "groupidx";
static char __pyx_k__instance[] = "instance";
static char __pyx_k__location[] = "location";
static char __pyx_k__readOnly[] = "readOnly";
static char __pyx_k__NodeAdded[] = "NodeAdded";
static char __pyx_k__NodeEvent[] = "NodeEvent";
static char __pyx_k__className[] = "className";
static char __pyx_k__openzwave[] = "openzwave";
static char __pyx_k__NodeNaming[] = "NodeNaming";
static char __pyx_k__ValueAdded[] = "ValueAdded";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k__DriverReady[] = "DriverReady";
static char __pyx_k__DriverReset[] = "DriverReset";
static char __pyx_k__EnumWithDoc[] = "EnumWithDoc";
static char __pyx_k__MsgComplete[] = "MsgComplete";
static char __pyx_k__NodeRemoved[] = "NodeRemoved";
static char __pyx_k__productName[] = "productName";
static char __pyx_k__PyValueTypes[] = "PyValueTypes";
static char __pyx_k__ValueChanged[] = "ValueChanged";
static char __pyx_k__ValueRemoved[] = "ValueRemoved";
static char __pyx_k__classVersion[] = "classVersion";
static char __pyx_k__commandClass[] = "commandClass";
static char __pyx_k__targetnodeid[] = "targetnodeid";
static char __pyx_k__CALLBACK_DESC[] = "CALLBACK_DESC";
static char __pyx_k__PollingEnabled[] = "PollingEnabled";
static char __pyx_k__commandClassId[] = "commandClassId";
static char __pyx_k__AllNodesQueried[] = "AllNodesQueried";
static char __pyx_k__PollingDisabled[] = "PollingDisabled";
static char __pyx_k__PyNotifications[] = "PyNotifications";
static char __pyx_k__NodeProtocolInfo[] = "NodeProtocolInfo";
static char __pyx_k__manufacturerName[] = "manufacturerName";
static char __pyx_k__notificationType[] = "notificationType";
static char __pyx_k__AwakeNodesQueried[] = "AwakeNodesQueried";
static char __pyx_k__COMMAND_CLASS_DESC[] = "COMMAND_CLASS_DESC";
static char __pyx_k__COMMAND_CLASS_HAIL[] = "COMMAND_CLASS_HAIL";
static char __pyx_k__COMMAND_CLASS_LOCK[] = "COMMAND_CLASS_LOCK";
static char __pyx_k__COMMAND_CLASS_MARK[] = "COMMAND_CLASS_MARK";
static char __pyx_k__COMMAND_CLASS_TIME[] = "COMMAND_CLASS_TIME";
static char __pyx_k__COMMAND_CLASS_ALARM[] = "COMMAND_CLASS_ALARM";
static char __pyx_k__COMMAND_CLASS_BASIC[] = "COMMAND_CLASS_BASIC";
static char __pyx_k__COMMAND_CLASS_CLOCK[] = "COMMAND_CLASS_CLOCK";
static char __pyx_k__COMMAND_CLASS_METER[] = "COMMAND_CLASS_METER";
static char __pyx_k__NodeQueriesComplete[] = "NodeQueriesComplete";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_10;
static PyObject *__pyx_n_s_100;
static PyObject *__pyx_n_s_101;
static PyObject *__pyx_n_s_102;
static PyObject *__pyx_n_s_103;
static PyObject *__pyx_n_s_104;
static PyObject *__pyx_n_s_105;
static PyObject *__pyx_n_s_106;
static PyObject *__pyx_n_s_107;
static PyObject *__pyx_n_s_108;
static PyObject *__pyx_n_s_109;
static PyObject *__pyx_n_s_110;
static PyObject *__pyx_n_s_111;
static PyObject *__pyx_n_s_112;
static PyObject *__pyx_n_s_113;
static PyObject *__pyx_n_s_114;
static PyObject *__pyx_n_s_115;
static PyObject *__pyx_n_s_116;
static PyObject *__pyx_n_s_117;
static PyObject *__pyx_n_s_118;
static PyObject *__pyx_n_s_119;
static PyObject *__pyx_n_s_120;
static PyObject *__pyx_n_s_121;
static PyObject *__pyx_n_s_122;
static PyObject *__pyx_n_s_123;
static PyObject *__pyx_n_s_124;
static PyObject *__pyx_n_s_125;
static PyObject *__pyx_n_s_126;
static PyObject *__pyx_n_s_127;
static PyObject *__pyx_n_s_128;
static PyObject *__pyx_n_s_129;
static PyObject *__pyx_kp_s_13;
static PyObject *__pyx_n_s_130;
static PyObject *__pyx_n_s_131;
static PyObject *__pyx_n_s_132;
static PyObject *__pyx_n_s_133;
static PyObject *__pyx_n_s_134;
static PyObject *__pyx_n_s_135;
static PyObject *__pyx_n_s_136;
static PyObject *__pyx_n_s_137;
static PyObject *__pyx_n_s_138;
static PyObject *__pyx_n_s_139;
static PyObject *__pyx_n_s_140;
static PyObject *__pyx_n_s_141;
static PyObject *__pyx_n_s_142;
static PyObject *__pyx_n_s_143;
static PyObject *__pyx_n_s_144;
static PyObject *__pyx_n_s_145;
static PyObject *__pyx_n_s_146;
static PyObject *__pyx_n_s_147;
static PyObject *__pyx_n_s_148;
static PyObject *__pyx_n_s_149;
static PyObject *__pyx_n_s_150;
static PyObject *__pyx_n_s_151;
static PyObject *__pyx_n_s_152;
static PyObject *__pyx_n_s_153;
static PyObject *__pyx_n_s_154;
static PyObject *__pyx_n_s_155;
static PyObject *__pyx_n_s_156;
static PyObject *__pyx_n_s_157;
static PyObject *__pyx_n_s_158;
static PyObject *__pyx_n_s_159;
static PyObject *__pyx_kp_s_16;
static PyObject *__pyx_n_s_160;
static PyObject *__pyx_n_s_161;
static PyObject *__pyx_n_s_162;
static PyObject *__pyx_n_s_163;
static PyObject *__pyx_n_s_164;
static PyObject *__pyx_n_s_165;
static PyObject *__pyx_n_s_166;
static PyObject *__pyx_n_s_167;
static PyObject *__pyx_n_s_168;
static PyObject *__pyx_n_s_169;
static PyObject *__pyx_n_s_170;
static PyObject *__pyx_n_s_171;
static PyObject *__pyx_kp_s_172;
static PyObject *__pyx_kp_s_173;
static PyObject *__pyx_kp_s_174;
static PyObject *__pyx_kp_s_175;
static PyObject *__pyx_kp_s_176;
static PyObject *__pyx_kp_s_177;
static PyObject *__pyx_kp_s_178;
static PyObject *__pyx_kp_s_179;
static PyObject *__pyx_kp_s_180;
static PyObject *__pyx_kp_s_181;
static PyObject *__pyx_kp_s_182;
static PyObject *__pyx_kp_s_183;
static PyObject *__pyx_kp_s_184;
static PyObject *__pyx_kp_s_185;
static PyObject *__pyx_kp_s_186;
static PyObject *__pyx_kp_s_187;
static PyObject *__pyx_kp_s_188;
static PyObject *__pyx_kp_s_189;
static PyObject *__pyx_kp_s_19;
static PyObject *__pyx_kp_s_22;
static PyObject *__pyx_kp_s_25;
static PyObject *__pyx_kp_s_28;
static PyObject *__pyx_kp_s_31;
static PyObject *__pyx_kp_s_34;
static PyObject *__pyx_kp_s_37;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_s_40;
static PyObject *__pyx_kp_s_43;
static PyObject *__pyx_kp_s_46;
static PyObject *__pyx_kp_s_49;
static PyObject *__pyx_kp_s_52;
static PyObject *__pyx_kp_s_55;
static PyObject *__pyx_kp_s_58;
static PyObject *__pyx_kp_s_61;
static PyObject *__pyx_kp_s_64;
static PyObject *__pyx_kp_s_67;
static PyObject *__pyx_kp_s_7;
static PyObject *__pyx_kp_s_70;
static PyObject *__pyx_kp_s_73;
static PyObject *__pyx_kp_s_76;
static PyObject *__pyx_kp_s_79;
static PyObject *__pyx_kp_s_82;
static PyObject *__pyx_kp_s_85;
static PyObject *__pyx_kp_s_88;
static PyObject *__pyx_kp_s_91;
static PyObject *__pyx_kp_s_94;
static PyObject *__pyx_n_s_96;
static PyObject *__pyx_n_s_97;
static PyObject *__pyx_n_s_98;
static PyObject *__pyx_n_s_99;
static PyObject *__pyx_n_s__AllNodesQueried;
static PyObject *__pyx_n_s__AwakeNodesQueried;
static PyObject *__pyx_n_s__Basic;
static PyObject *__pyx_n_s__Bool;
static PyObject *__pyx_n_s__Button;
static PyObject *__pyx_n_s__Byte;
static PyObject *__pyx_n_s__CALLBACK_DESC;
static PyObject *__pyx_n_s__COMMAND_CLASS_ALARM;
static PyObject *__pyx_n_s__COMMAND_CLASS_BASIC;
static PyObject *__pyx_n_s__COMMAND_CLASS_CLOCK;
static PyObject *__pyx_n_s__COMMAND_CLASS_DESC;
static PyObject *__pyx_n_s__COMMAND_CLASS_HAIL;
static PyObject *__pyx_n_s__COMMAND_CLASS_LOCK;
static PyObject *__pyx_n_s__COMMAND_CLASS_MARK;
static PyObject *__pyx_n_s__COMMAND_CLASS_METER;
static PyObject *__pyx_n_s__COMMAND_CLASS_TIME;
static PyObject *__pyx_n_s__Config;
static PyObject *__pyx_n_s__Decimal;
static PyObject *__pyx_n_s__DriverReady;
static PyObject *__pyx_n_s__DriverReset;
static PyObject *__pyx_n_s__EnumWithDoc;
static PyObject *__pyx_n_s__Group;
static PyObject *__pyx_n_s__Int;
static PyObject *__pyx_n_s__List;
static PyObject *__pyx_n_s__MsgComplete;
static PyObject *__pyx_n_s__NodeAdded;
static PyObject *__pyx_n_s__NodeEvent;
static PyObject *__pyx_n_s__NodeNaming;
static PyObject *__pyx_n_s__NodeNew;
static PyObject *__pyx_n_s__NodeProtocolInfo;
static PyObject *__pyx_n_s__NodeQueriesComplete;
static PyObject *__pyx_n_s__NodeRemoved;
static PyObject *__pyx_n_s__PollingDisabled;
static PyObject *__pyx_n_s__PollingEnabled;
static PyObject *__pyx_n_s__PyGenres;
static PyObject *__pyx_n_s__PyNotifications;
static PyObject *__pyx_n_s__PyValueTypes;
static PyObject *__pyx_n_s__Schedule;
static PyObject *__pyx_n_s__Short;
static PyObject *__pyx_n_s__String;
static PyObject *__pyx_n_s__System;
static PyObject *__pyx_n_s__User;
static PyObject *__pyx_n_s__ValueAdded;
static PyObject *__pyx_n_s__ValueChanged;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s__ValueRemoved;
static PyObject *__pyx_n_s____doc__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__a;
static PyObject *__pyx_n_s__b;
static PyObject *__pyx_n_s__c;
static PyObject *__pyx_n_s__className;
static PyObject *__pyx_n_s__classVersion;
static PyObject *__pyx_n_s__commandClass;
static PyObject *__pyx_n_s__commandClassId;
static PyObject *__pyx_n_s__doc;
static PyObject *__pyx_n_s__event;
static PyObject *__pyx_n_s__genre;
static PyObject *__pyx_n_s__groupIdx;
static PyObject *__pyx_n_s__groupidx;
static PyObject *__pyx_n_s__homeId;
static PyObject *__pyx_n_s__homeid;
static PyObject *__pyx_n_s__id;
static PyObject *__pyx_n_s__index;
static PyObject *__pyx_n_s__instance;
static PyObject *__pyx_n_s__label;
static PyObject *__pyx_n_s__level;
static PyObject *__pyx_n_s__location;
static PyObject *__pyx_n_s__manufacturerName;
static PyObject *__pyx_n_s__name;
static PyObject *__pyx_n_s__nodeId;
static PyObject *__pyx_n_s__nodeid;
static PyObject *__pyx_n_s__notificationType;
static PyObject *__pyx_n_s__openzwave;
static PyObject *__pyx_n_s__param;
static PyObject *__pyx_n_s__productName;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__readOnly;
static PyObject *__pyx_n_s__self;
static PyObject *__pyx_n_s__setDoc;
static PyObject *__pyx_n_s__targetnodeid;
static PyObject *__pyx_n_s__type;
static PyObject *__pyx_n_s__units;
static PyObject *__pyx_n_s__value;
static PyObject *__pyx_n_s__valueId;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_32;
static PyObject *__pyx_int_33;
static PyObject *__pyx_int_34;
static PyObject *__pyx_int_35;
static PyObject *__pyx_int_36;
static PyObject *__pyx_int_37;
static PyObject *__pyx_int_38;
static PyObject *__pyx_int_39;
static PyObject *__pyx_int_40;
static PyObject *__pyx_int_41;
static PyObject *__pyx_int_42;
static PyObject *__pyx_int_43;
static PyObject *__pyx_int_44;
static PyObject *__pyx_int_45;
static PyObject *__pyx_int_46;
static PyObject *__pyx_int_47;
static PyObject *__pyx_int_48;
static PyObject *__pyx_int_49;
static PyObject *__pyx_int_50;
static PyObject *__pyx_int_51;
static PyObject *__pyx_int_52;
static PyObject *__pyx_int_53;
static PyObject *__pyx_int_56;
static PyObject *__pyx_int_60;
static PyObject *__pyx_int_61;
static PyObject *__pyx_int_62;
static PyObject *__pyx_int_64;
static PyObject *__pyx_int_66;
static PyObject *__pyx_int_67;
static PyObject *__pyx_int_68;
static PyObject *__pyx_int_69;
static PyObject *__pyx_int_70;
static PyObject *__pyx_int_71;
static PyObject *__pyx_int_76;
static PyObject *__pyx_int_78;
static PyObject *__pyx_int_80;
static PyObject *__pyx_int_81;
static PyObject *__pyx_int_96;
static PyObject *__pyx_int_98;
static PyObject *__pyx_int_99;
static PyObject *__pyx_int_112;
static PyObject *__pyx_int_113;
static PyObject *__pyx_int_114;
static PyObject *__pyx_int_115;
static PyObject *__pyx_int_117;
static PyObject *__pyx_int_118;
static PyObject *__pyx_int_119;
static PyObject *__pyx_int_122;
static PyObject *__pyx_int_123;
static PyObject *__pyx_int_124;
static PyObject *__pyx_int_125;
static PyObject *__pyx_int_128;
static PyObject *__pyx_int_129;
static PyObject *__pyx_int_130;
static PyObject *__pyx_int_132;
static PyObject *__pyx_int_133;
static PyObject *__pyx_int_134;
static PyObject *__pyx_int_135;
static PyObject *__pyx_int_136;
static PyObject *__pyx_int_137;
static PyObject *__pyx_int_138;
static PyObject *__pyx_int_139;
static PyObject *__pyx_int_140;
static PyObject *__pyx_int_141;
static PyObject *__pyx_int_142;
static PyObject *__pyx_int_143;
static PyObject *__pyx_int_144;
static PyObject *__pyx_int_145;
static PyObject *__pyx_int_146;
static PyObject *__pyx_int_147;
static PyObject *__pyx_int_148;
static PyObject *__pyx_int_149;
static PyObject *__pyx_int_150;
static PyObject *__pyx_int_151;
static PyObject *__pyx_int_152;
static PyObject *__pyx_int_153;
static PyObject *__pyx_int_154;
static PyObject *__pyx_int_155;
static PyObject *__pyx_int_156;
static PyObject *__pyx_int_157;
static PyObject *__pyx_int_158;
static PyObject *__pyx_int_239;
static PyObject *__pyx_int_240;
static PyObject *__pyx_k_tuple_2;
static PyObject *__pyx_k_tuple_3;
static PyObject *__pyx_k_tuple_5;
static PyObject *__pyx_k_tuple_6;
static PyObject *__pyx_k_tuple_8;
static PyObject *__pyx_k_tuple_9;
static PyObject *__pyx_k_tuple_11;
static PyObject *__pyx_k_tuple_12;
static PyObject *__pyx_k_tuple_14;
static PyObject *__pyx_k_tuple_15;
static PyObject *__pyx_k_tuple_17;
static PyObject *__pyx_k_tuple_18;
static PyObject *__pyx_k_tuple_20;
static PyObject *__pyx_k_tuple_21;
static PyObject *__pyx_k_tuple_23;
static PyObject *__pyx_k_tuple_24;
static PyObject *__pyx_k_tuple_26;
static PyObject *__pyx_k_tuple_27;
static PyObject *__pyx_k_tuple_29;
static PyObject *__pyx_k_tuple_30;
static PyObject *__pyx_k_tuple_32;
static PyObject *__pyx_k_tuple_33;
static PyObject *__pyx_k_tuple_35;
static PyObject *__pyx_k_tuple_36;
static PyObject *__pyx_k_tuple_38;
static PyObject *__pyx_k_tuple_39;
static PyObject *__pyx_k_tuple_41;
static PyObject *__pyx_k_tuple_42;
static PyObject *__pyx_k_tuple_44;
static PyObject *__pyx_k_tuple_45;
static PyObject *__pyx_k_tuple_47;
static PyObject *__pyx_k_tuple_48;
static PyObject *__pyx_k_tuple_50;
static PyObject *__pyx_k_tuple_51;
static PyObject *__pyx_k_tuple_53;
static PyObject *__pyx_k_tuple_54;
static PyObject *__pyx_k_tuple_56;
static PyObject *__pyx_k_tuple_57;
static PyObject *__pyx_k_tuple_59;
static PyObject *__pyx_k_tuple_60;
static PyObject *__pyx_k_tuple_62;
static PyObject *__pyx_k_tuple_63;
static PyObject *__pyx_k_tuple_65;
static PyObject *__pyx_k_tuple_66;
static PyObject *__pyx_k_tuple_68;
static PyObject *__pyx_k_tuple_69;
static PyObject *__pyx_k_tuple_71;
static PyObject *__pyx_k_tuple_72;
static PyObject *__pyx_k_tuple_74;
static PyObject *__pyx_k_tuple_75;
static PyObject *__pyx_k_tuple_77;
static PyObject *__pyx_k_tuple_78;
static PyObject *__pyx_k_tuple_80;
static PyObject *__pyx_k_tuple_81;
static PyObject *__pyx_k_tuple_83;
static PyObject *__pyx_k_tuple_84;
static PyObject *__pyx_k_tuple_86;
static PyObject *__pyx_k_tuple_87;
static PyObject *__pyx_k_tuple_89;
static PyObject *__pyx_k_tuple_90;
static PyObject *__pyx_k_tuple_92;
static PyObject *__pyx_k_tuple_93;
static PyObject *__pyx_k_tuple_95;
static PyObject *__pyx_k_tuple_190;

/* "openzwave.pyx":213
 *     cdef Options *options
 * 
 *     def create(self, char *a, char *b, char *c):             # <<<<<<<<<<<<<<
 *         self.options = Create(string(a), string(b), string(c))
 * 
 */

static PyObject *__pyx_pf_9openzwave_9PyOptions_create(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9openzwave_9PyOptions_create(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_a;
  char *__pyx_v_b;
  char *__pyx_v_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__a,&__pyx_n_s__b,&__pyx_n_s__c,0};
  __Pyx_RefNannySetupContext("create");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__a);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__c);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "create") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_a = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_b) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_c = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_c) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyOptions.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":214
 * 
 *     def create(self, char *a, char *b, char *c):
 *         self.options = Create(string(a), string(b), string(c))             # <<<<<<<<<<<<<<
 * 
 *     def lock(self):
 */
  ((struct __pyx_obj_9openzwave_PyOptions *)__pyx_v_self)->options = OpenZWave::Options::Create(std::string(__pyx_v_a), std::string(__pyx_v_b), std::string(__pyx_v_c));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":216
 *         self.options = Create(string(a), string(b), string(c))
 * 
 *     def lock(self):             # <<<<<<<<<<<<<<
 *         return self.options.Lock()
 * 
 */

static PyObject *__pyx_pf_9openzwave_9PyOptions_1lock(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9openzwave_9PyOptions_1lock(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lock");

  /* "openzwave.pyx":217
 * 
 *     def lock(self):
 *         return self.options.Lock()             # <<<<<<<<<<<<<<
 * 
 * class EnumWithDoc(str):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_obj_9openzwave_PyOptions *)__pyx_v_self)->options->Lock()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openzwave.PyOptions.lock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":220
 * 
 * class EnumWithDoc(str):
 *     def setDoc(self, doc):             # <<<<<<<<<<<<<<
 *         self.__doc__ = doc
 *         return self
 */

static PyObject *__pyx_pf_9openzwave_11EnumWithDoc_setDoc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9openzwave_11EnumWithDoc_setDoc = {__Pyx_NAMESTR("setDoc"), (PyCFunction)__pyx_pf_9openzwave_11EnumWithDoc_setDoc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_9openzwave_11EnumWithDoc_setDoc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_doc = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__doc,0};
  __Pyx_RefNannySetupContext("setDoc");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__doc);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setDoc", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setDoc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_doc = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setDoc", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.EnumWithDoc.setDoc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":221
 * class EnumWithDoc(str):
 *     def setDoc(self, doc):
 *         self.__doc__ = doc             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s____doc__, __pyx_v_doc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "openzwave.pyx":222
 *     def setDoc(self, doc):
 *         self.__doc__ = doc
 *         return self             # <<<<<<<<<<<<<<
 * 
 * PyNotifications = [
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.EnumWithDoc.setDoc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":283
 * cdef map[uint32, ValueID] values_map
 * 
 * cdef addValueId(ValueID v, n):             # <<<<<<<<<<<<<<
 *     cdef string value
 *     cdef string label
 */

static PyObject *__pyx_f_9openzwave_addValueId(OpenZWave::ValueID __pyx_v_v, PyObject *__pyx_v_n) {
  std::string __pyx_v_value;
  std::string __pyx_v_label;
  std::string __pyx_v_units;
  OpenZWave::Manager *__pyx_v_manager;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_9openzwave_uint8 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addValueId");

  /* "openzwave.pyx":287
 *     cdef string label
 *     cdef string units
 *     cdef Manager *manager = Get()             # <<<<<<<<<<<<<<
 *     manager.GetValueAsString(v, &value)
 *     label = manager.GetValueLabel(v)
 */
  __pyx_v_manager = OpenZWave::Manager::Get();

  /* "openzwave.pyx":288
 *     cdef string units
 *     cdef Manager *manager = Get()
 *     manager.GetValueAsString(v, &value)             # <<<<<<<<<<<<<<
 *     label = manager.GetValueLabel(v)
 *     units = manager.GetValueUnits(v)
 */
  __pyx_v_manager->GetValueAsString(__pyx_v_v, (&__pyx_v_value));

  /* "openzwave.pyx":289
 *     cdef Manager *manager = Get()
 *     manager.GetValueAsString(v, &value)
 *     label = manager.GetValueLabel(v)             # <<<<<<<<<<<<<<
 *     units = manager.GetValueUnits(v)
 *     n['valueId'] = {'homeId' : v.GetHomeId(),
 */
  __pyx_v_label = __pyx_v_manager->GetValueLabel(__pyx_v_v);

  /* "openzwave.pyx":290
 *     manager.GetValueAsString(v, &value)
 *     label = manager.GetValueLabel(v)
 *     units = manager.GetValueUnits(v)             # <<<<<<<<<<<<<<
 *     n['valueId'] = {'homeId' : v.GetHomeId(),
 *                     'nodeId' : v.GetNodeId(),
 */
  __pyx_v_units = __pyx_v_manager->GetValueUnits(__pyx_v_v);

  /* "openzwave.pyx":291
 *     label = manager.GetValueLabel(v)
 *     units = manager.GetValueUnits(v)
 *     n['valueId'] = {'homeId' : v.GetHomeId(),             # <<<<<<<<<<<<<<
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_v.GetHomeId()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__homeId), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openzwave.pyx":292
 *     units = manager.GetValueUnits(v)
 *     n['valueId'] = {'homeId' : v.GetHomeId(),
 *                     'nodeId' : v.GetNodeId(),             # <<<<<<<<<<<<<<
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 *                     'instance' : v.GetInstance(),
 */
  __pyx_t_2 = PyInt_FromLong(__pyx_v_v.GetNodeId()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__nodeId), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openzwave.pyx":293
 *     n['valueId'] = {'homeId' : v.GetHomeId(),
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],             # <<<<<<<<<<<<<<
 *                     'instance' : v.GetInstance(),
 *                     'index' : v.GetIndex(),
 */
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)((PyObject*)__pyx_ptype_9openzwave_PyManager)), __pyx_n_s__COMMAND_CLASS_DESC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_v_v.GetCommandClassId();
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, __pyx_t_3, sizeof(__pyx_t_9openzwave_uint8)+1, PyInt_FromLong); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__commandClass), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "openzwave.pyx":294
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 *                     'instance' : v.GetInstance(),             # <<<<<<<<<<<<<<
 *                     'index' : v.GetIndex(),
 *                     'id' : v.GetId(),
 */
  __pyx_t_4 = PyInt_FromLong(__pyx_v_v.GetInstance()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__instance), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "openzwave.pyx":295
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 *                     'instance' : v.GetInstance(),
 *                     'index' : v.GetIndex(),             # <<<<<<<<<<<<<<
 *                     'id' : v.GetId(),
 *                     'genre' : PyGenres[v.GetGenre()],
 */
  __pyx_t_4 = PyInt_FromLong(__pyx_v_v.GetIndex()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__index), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "openzwave.pyx":296
 *                     'instance' : v.GetInstance(),
 *                     'index' : v.GetIndex(),
 *                     'id' : v.GetId(),             # <<<<<<<<<<<<<<
 *                     'genre' : PyGenres[v.GetGenre()],
 *                     'type' : PyValueTypes[v.GetType()],
 */
  __pyx_t_4 = PyLong_FromUnsignedLong(__pyx_v_v.GetId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__id), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "openzwave.pyx":297
 *                     'index' : v.GetIndex(),
 *                     'id' : v.GetId(),
 *                     'genre' : PyGenres[v.GetGenre()],             # <<<<<<<<<<<<<<
 *                     'type' : PyValueTypes[v.GetType()],
 *                     'value' : value.c_str(),
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyGenres); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_v.GetGenre()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyObject_GetItem(__pyx_t_4, __pyx_t_2); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__genre), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "openzwave.pyx":298
 *                     'id' : v.GetId(),
 *                     'genre' : PyGenres[v.GetGenre()],
 *                     'type' : PyValueTypes[v.GetType()],             # <<<<<<<<<<<<<<
 *                     'value' : value.c_str(),
 *                     'label' : label.c_str(),
 */
  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyValueTypes); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_v.GetType()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_GetItem(__pyx_t_5, __pyx_t_2); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__type), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "openzwave.pyx":299
 *                     'genre' : PyGenres[v.GetGenre()],
 *                     'type' : PyValueTypes[v.GetType()],
 *                     'value' : value.c_str(),             # <<<<<<<<<<<<<<
 *                     'label' : label.c_str(),
 *                     'units' : units.c_str(),
 */
  __pyx_t_4 = PyBytes_FromString(__pyx_v_value.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__value), ((PyObject *)__pyx_t_4)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

  /* "openzwave.pyx":300
 *                     'type' : PyValueTypes[v.GetType()],
 *                     'value' : value.c_str(),
 *                     'label' : label.c_str(),             # <<<<<<<<<<<<<<
 *                     'units' : units.c_str(),
 *                     'readOnly': manager.IsValueReadOnly(v),
 */
  __pyx_t_4 = PyBytes_FromString(__pyx_v_label.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__label), ((PyObject *)__pyx_t_4)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

  /* "openzwave.pyx":301
 *                     'value' : value.c_str(),
 *                     'label' : label.c_str(),
 *                     'units' : units.c_str(),             # <<<<<<<<<<<<<<
 *                     'readOnly': manager.IsValueReadOnly(v),
 *                     }
 */
  __pyx_t_4 = PyBytes_FromString(__pyx_v_units.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__units), ((PyObject *)__pyx_t_4)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

  /* "openzwave.pyx":302
 *                     'label' : label.c_str(),
 *                     'units' : units.c_str(),
 *                     'readOnly': manager.IsValueReadOnly(v),             # <<<<<<<<<<<<<<
 *                     }
 * 
 */
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_manager->IsValueReadOnly(__pyx_v_v)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__readOnly), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "openzwave.pyx":291
 *     label = manager.GetValueLabel(v)
 *     units = manager.GetValueUnits(v)
 *     n['valueId'] = {'homeId' : v.GetHomeId(),             # <<<<<<<<<<<<<<
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 */
  if (PyObject_SetItem(__pyx_v_n, ((PyObject *)__pyx_n_s__valueId), ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "openzwave.pyx":305
 *                     }
 * 
 *     values_map.insert ( pair[uint32, ValueID] (v.GetId(), v))             # <<<<<<<<<<<<<<
 * 
 * cdef void callback(const_notification _notification, void* _context) with gil:
 */
  __pyx_v_9openzwave_values_map.insert(((std::pair<__pyx_t_9openzwave_uint32,OpenZWave::ValueID>)std::pair<__pyx_t_9openzwave_uint32,OpenZWave::ValueID>(__pyx_v_v.GetId(), __pyx_v_v)));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openzwave.addValueId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":307
 *     values_map.insert ( pair[uint32, ValueID] (v.GetId(), v))
 * 
 * cdef void callback(const_notification _notification, void* _context) with gil:             # <<<<<<<<<<<<<<
 *     cdef Notification* notification = <Notification*>_notification
 * 
 */

static void __pyx_f_9openzwave_callback(OpenZWave::Notification const* __pyx_v__notification, void *__pyx_v__context) {
  OpenZWave::Notification *__pyx_v_notification;
  PyObject *__pyx_v_n = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("callback");

  /* "openzwave.pyx":308
 * 
 * cdef void callback(const_notification _notification, void* _context) with gil:
 *     cdef Notification* notification = <Notification*>_notification             # <<<<<<<<<<<<<<
 * 
 *     n = {'notificationType' : PyNotifications[notification.GetType()],
 */
  __pyx_v_notification = ((OpenZWave::Notification *)__pyx_v__notification);

  /* "openzwave.pyx":310
 *     cdef Notification* notification = <Notification*>_notification
 * 
 *     n = {'notificationType' : PyNotifications[notification.GetType()],             # <<<<<<<<<<<<<<
 *          'homeId' : notification.GetHomeId(),
 *          'nodeId' : notification.GetNodeId(),
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyNotifications); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(__pyx_v_notification->GetType()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__notificationType), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "openzwave.pyx":311
 * 
 *     n = {'notificationType' : PyNotifications[notification.GetType()],
 *          'homeId' : notification.GetHomeId(),             # <<<<<<<<<<<<<<
 *          'nodeId' : notification.GetNodeId(),
 *          }
 */
  __pyx_t_4 = PyLong_FromUnsignedLong(__pyx_v_notification->GetHomeId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__homeId), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "openzwave.pyx":312
 *     n = {'notificationType' : PyNotifications[notification.GetType()],
 *          'homeId' : notification.GetHomeId(),
 *          'nodeId' : notification.GetNodeId(),             # <<<<<<<<<<<<<<
 *          }
 *     if notification.GetType() == Type_Group:
 */
  __pyx_t_4 = PyInt_FromLong(__pyx_v_notification->GetNodeId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__nodeId), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_n = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "openzwave.pyx":314
 *          'nodeId' : notification.GetNodeId(),
 *          }
 *     if notification.GetType() == Type_Group:             # <<<<<<<<<<<<<<
 *         n['groupIdx'] = notification.GetGroupIdx()
 *     if notification.GetType() == Type_NodeEvent:
 */
  __pyx_t_5 = (__pyx_v_notification->GetType() == OpenZWave::Notification::Type_Group);
  if (__pyx_t_5) {

    /* "openzwave.pyx":315
 *          }
 *     if notification.GetType() == Type_Group:
 *         n['groupIdx'] = notification.GetGroupIdx()             # <<<<<<<<<<<<<<
 *     if notification.GetType() == Type_NodeEvent:
 *         n['event'] = notification.GetEvent()
 */
    __pyx_t_1 = PyInt_FromLong(__pyx_v_notification->GetGroupIdx()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(((PyObject *)__pyx_v_n), ((PyObject *)__pyx_n_s__groupIdx), __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "openzwave.pyx":316
 *     if notification.GetType() == Type_Group:
 *         n['groupIdx'] = notification.GetGroupIdx()
 *     if notification.GetType() == Type_NodeEvent:             # <<<<<<<<<<<<<<
 *         n['event'] = notification.GetEvent()
 * 
 */
  __pyx_t_5 = (__pyx_v_notification->GetType() == OpenZWave::Notification::Type_NodeEvent);
  if (__pyx_t_5) {

    /* "openzwave.pyx":317
 *         n['groupIdx'] = notification.GetGroupIdx()
 *     if notification.GetType() == Type_NodeEvent:
 *         n['event'] = notification.GetEvent()             # <<<<<<<<<<<<<<
 * 
 *     addValueId(notification.GetValueID(), n)
 */
    __pyx_t_1 = PyInt_FromLong(__pyx_v_notification->GetEvent()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(((PyObject *)__pyx_v_n), ((PyObject *)__pyx_n_s__event), __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "openzwave.pyx":319
 *         n['event'] = notification.GetEvent()
 * 
 *     addValueId(notification.GetValueID(), n)             # <<<<<<<<<<<<<<
 * 
 *     (<object>_context)(n)
 */
  __pyx_t_1 = __pyx_f_9openzwave_addValueId(__pyx_v_notification->GetValueID(), ((PyObject *)__pyx_v_n)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":321
 *     addValueId(notification.GetValueID(), n)
 * 
 *     (<object>_context)(n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_n));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_n));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_n));
  __pyx_t_4 = PyObject_Call(((PyObject *)__pyx_v__context), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("openzwave.callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "openzwave.pyx":464
 *     cdef object _watcherCallback
 * 
 *     def create(self):             # <<<<<<<<<<<<<<
 *         '''
 * Creates the Manager singleton object.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_create(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_create[] = "\nCreates the Manager singleton object.\n\nThe Manager provides the public interface to OpenZWave, exposing all the\nfunctionality required to add Z-Wave support to an application. There can be\nonly one Manager in an OpenZWave application.  An Options object must be\ncreated and Locked first, otherwise the call to Manager::Create will fail.\nOnce the Manager has been created, call AddWatcher to install a notification\ncallback handler, and then call the AddDriver method for each attached PC\nZ-Wave controller in turn.\n\n@param options a locked Options object containing all the application's\nconfigurable option values.\n@return a pointer to the newly created Manager object, or NULL if creation\nfailed.\n@see options, get, addWatcher, addDriver\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_create(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create");

  /* "openzwave.pyx":482
 * @see options, get, addWatcher, addDriver
 *         '''
 *         self.manager = Create()             # <<<<<<<<<<<<<<
 *         PyEval_InitThreads()
 * #
 */
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager = OpenZWave::Manager::Create();

  /* "openzwave.pyx":483
 *         '''
 *         self.manager = Create()
 *         PyEval_InitThreads()             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  PyEval_InitThreads();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":491
 * # polled every time the application starts.
 * #
 *     def writeConfig(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Saves the configuration of a PC Controller's Z-Wave network to the
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_1writeConfig(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_1writeConfig[] = "\nSaves the configuration of a PC Controller's Z-Wave network to the\napplication's user data folder.\n\nThis method does not normally need to be called, since OpenZWave will save the\nstate automatically during the shutdown process.  It is provided here only as\nan aid to development. The configuration of each PC Controller's Z-Wave network\nis stored in a separate file.  The filename consists of the 8 digit hexadecimal\nversion of the controller's Home ID, prefixed with the string 'zwcfg_'.  This\nconvention allows OpenZWave to find the correct configuration file for a\ncontroller, even if it is attached to a different serial port, USB device path,\netc.\n\n@param homeId The Home ID of the Z-Wave controller to save.\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_1writeConfig(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeConfig");

  /* "openzwave.pyx":507
 * @param homeId The Home ID of the Z-Wave controller to save.
 *         '''
 *         self.manager.WriteConfig(homeid)             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->WriteConfig(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.writeConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":514
 * # Methods for adding and removing drivers and obtaining basic controller information.
 * #
 *     def addDriver(self, char *serialport):             # <<<<<<<<<<<<<<
 *         '''
 * Creates a new driver for a Z-Wave controller.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_2addDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_2addDriver[] = "\nCreates a new driver for a Z-Wave controller.\n\nThis method creates a Driver object for handling communications with a single\nZ-Wave controller.  In the background, the driver first tries to read\nconfiguration data saved during a previous run.  It then queries the controller\ndirectly for any missing information, and a refresh of the list of nodes that\nit controls.  Once this information has been received, a DriverReady\nnotification callback is sent, containing the Home ID of the controller.  This\nHome ID is required by most of the OpenZWave Manager class methods.\n\n@param controllerPath The string used to open the controller.  On Windows this\nmight be something like \"\\.\\COM3\", or on Linux \"/dev/ttyUSB0\".\n@return True if a new driver was created\n@see RemoveDriver\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_2addDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport) {
  char *__pyx_v_serialport;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addDriver");
  assert(__pyx_arg_serialport); {
    __pyx_v_serialport = PyBytes_AsString(__pyx_arg_serialport); if (unlikely((!__pyx_v_serialport) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.addDriver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":531
 * @see RemoveDriver
 *         '''
 *         self.manager.AddDriver(string(serialport))             # <<<<<<<<<<<<<<
 * 
 *     def removeDriver(self, char *serialport):
 */
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->AddDriver(std::string(__pyx_v_serialport));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":533
 *         self.manager.AddDriver(string(serialport))
 * 
 *     def removeDriver(self, char *serialport):             # <<<<<<<<<<<<<<
 *         '''
 * Removes the driver for a Z-Wave controller, and closes the controller.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_3removeDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_3removeDriver[] = "\nRemoves the driver for a Z-Wave controller, and closes the controller.\n\nDrivers do not need to be explicitly removed before calling Destroy - this is\nhandled automatically.\n\n@param controllerPath The same string as was passed in the original call to\nAddDriver.\n@return True if the driver was removed, False if it could not be found.\n@see AddDriver\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_3removeDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport) {
  char *__pyx_v_serialport;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removeDriver");
  assert(__pyx_arg_serialport); {
    __pyx_v_serialport = PyBytes_AsString(__pyx_arg_serialport); if (unlikely((!__pyx_v_serialport) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.removeDriver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":545
 * @see AddDriver
 *         '''
 *         self.manager.RemoveDriver(string(serialport))             # <<<<<<<<<<<<<<
 * 
 *     def getControllerNodeId(self, homeid):
 */
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->RemoveDriver(std::string(__pyx_v_serialport));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":547
 *         self.manager.RemoveDriver(string(serialport))
 * 
 *     def getControllerNodeId(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get the node ID of the Z-Wave controller.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_4getControllerNodeId(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_4getControllerNodeId[] = "\nGet the node ID of the Z-Wave controller.\n\n@param homeId The Home ID of the Z-Wave controller.\n@return the node ID of the Z-Wave controller\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_4getControllerNodeId(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getControllerNodeId");

  /* "openzwave.pyx":554
 * @return the node ID of the Z-Wave controller
 *         '''
 *         return self.manager.GetControllerNodeId(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def isPrimaryController(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetControllerNodeId(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openzwave.PyManager.getControllerNodeId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":556
 *         return self.manager.GetControllerNodeId(homeid)
 * 
 *     def isPrimaryController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Query if the controller is a primary controller.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_5isPrimaryController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_5isPrimaryController[] = "\nQuery if the controller is a primary controller.\n\nThe primary controller is the main device used to configure and control a\nZ-Wave network.  There can only be one primary controller - all other\ncontrollers are secondary controllers.\n\nThe only difference between a primary and secondary controller is that the\nprimary is the only one that can be used to add or remove other devices.  For\nthis reason, it is usually better for the promary controller to be portable,\nsince most devices must be added when installed in their final location.\n\nCalls to BeginControllerCommand will fail if the controller is not the primary.\n\n@param homeId The Home ID of the Z-Wave controller.\n@return True if it is a primary controller, False if not.\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_5isPrimaryController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isPrimaryController");

  /* "openzwave.pyx":574
 * @return True if it is a primary controller, False if not.
 *         '''
 *         return self.manager.IsPrimaryController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def isStaticUpdateController(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->IsPrimaryController(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openzwave.PyManager.isPrimaryController", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":576
 *         return self.manager.IsPrimaryController(homeid)
 * 
 *     def isStaticUpdateController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Query if the controller is a static update controller (SUC).
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_6isStaticUpdateController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_6isStaticUpdateController[] = "\nQuery if the controller is a static update controller (SUC).\n\nA Static Update Controller (SUC) is a controller that must never be moved in\nnormal operation and which can be used by other nodes to receive information\nabout network changes.\n\n@param homeId The Home ID of the Z-Wave controller.\n@return True if it is a static update controller, False if not.\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_6isStaticUpdateController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isStaticUpdateController");

  /* "openzwave.pyx":587
 * @return True if it is a static update controller, False if not.
 *         '''
 *         return self.manager.IsStaticUpdateController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def isBridgeController(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->IsStaticUpdateController(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openzwave.PyManager.isStaticUpdateController", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":589
 *         return self.manager.IsStaticUpdateController(homeid)
 * 
 *     def isBridgeController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Query if the controller is using the bridge controller library.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_7isBridgeController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_7isBridgeController[] = "\nQuery if the controller is using the bridge controller library.\n\nA bridge controller is able to create virtual nodes that can be associated\nwith other controllers to enable events to be passed on.\n\n@param homeId The Home ID of the Z-Wave controller.\n@return True if it is a bridge controller, False if not.\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_7isBridgeController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isBridgeController");

  /* "openzwave.pyx":599
 * @return True if it is a bridge controller, False if not.
 *         '''
 *         return self.manager.IsBridgeController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def getLibraryVersion(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->IsBridgeController(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openzwave.PyManager.isBridgeController", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":601
 *         return self.manager.IsBridgeController(homeid)
 * 
 *     def getLibraryVersion(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get the version of the Z-Wave API library used by a controller.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_8getLibraryVersion(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_8getLibraryVersion[] = "\nGet the version of the Z-Wave API library used by a controller.\n\n@param _homeId The Home ID of the Z-Wave controller.\n@return a string containing the library version. For example, \"Z-Wave 2.48\".\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_8getLibraryVersion(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getLibraryVersion");

  /* "openzwave.pyx":608
 * @return a string containing the library version. For example, "Z-Wave 2.48".
 *         '''
 *         cdef string c_string = self.manager.GetLibraryVersion(homeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetLibraryVersion(__pyx_t_1);

  /* "openzwave.pyx":609
 *         '''
 *         cdef string c_string = self.manager.GetLibraryVersion(homeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getLibraryTypeName(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openzwave.PyManager.getLibraryVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":611
 *         return c_string.c_str()
 * 
 *     def getLibraryTypeName(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get a string containing the Z-Wave API library type used by a controller.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_9getLibraryTypeName(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_9getLibraryTypeName[] = "\nGet a string containing the Z-Wave API library type used by a controller.\n\nThe possible library types are:\n    - Static Controller\n    - Controller\n    - Enhanced Slave\n    - Slave\n    - Installer\n    - Routing Slave\n    - Bridge Controller\n    - Device Under Test\n\nThe controller should never return a slave library type.  For a more efficient\ntest of whether a controller is a Bridge Controller, use the IsBridgeController\nmethod.\n\n@param homeId The Home ID of the Z-Wave controller.\n@return a string containing the library type.\n@see GetLibraryVersion, IsBridgeController\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_9getLibraryTypeName(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getLibraryTypeName");

  /* "openzwave.pyx":633
 * @see GetLibraryVersion, IsBridgeController
 *         '''
 *         cdef string c_string = self.manager.GetLibraryTypeName(homeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * #
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetLibraryTypeName(__pyx_t_1);

  /* "openzwave.pyx":634
 *         '''
 *         cdef string c_string = self.manager.GetLibraryTypeName(homeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openzwave.PyManager.getLibraryTypeName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":643
 * # detect status changes.
 * #
 *     def getPollInterval(self):             # <<<<<<<<<<<<<<
 *         '''Get the time period between polls of a nodes state'''
 *         return self.manager.GetPollInterval()
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_10getPollInterval(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_10getPollInterval[] = "Get the time period between polls of a nodes state";
static PyObject *__pyx_pf_9openzwave_9PyManager_10getPollInterval(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPollInterval");

  /* "openzwave.pyx":645
 *     def getPollInterval(self):
 *         '''Get the time period between polls of a nodes state'''
 *         return self.manager.GetPollInterval()             # <<<<<<<<<<<<<<
 * 
 *     def setPollInterval(self, seconds):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetPollInterval()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openzwave.PyManager.getPollInterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":647
 *         return self.manager.GetPollInterval()
 * 
 *     def setPollInterval(self, seconds):             # <<<<<<<<<<<<<<
 *         '''
 * Set the time period between polls of a nodes state.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_11setPollInterval(PyObject *__pyx_v_self, PyObject *__pyx_v_seconds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_11setPollInterval[] = "\nSet the time period between polls of a nodes state.\n\nDue to patent concerns, some devices do not report state changes automatically\nto the controller.  These devices need to have their state polled at regular\nintervals.  The length of the interval is the same for all devices.  To even\nout the Z-Wave network traffic generated by polling, OpenZWave divides the\npolling interval by the number of devices that have polling enabled, and polls\neach in turn.  It is recommended that if possible, the interval should not be\nset shorter than the number of polled devices in seconds (so that the network\ndoes not have to cope with more than one poll per second).\n\n@param seconds The length of the polling interval in seconds.\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_11setPollInterval(PyObject *__pyx_v_self, PyObject *__pyx_v_seconds) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint8 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPollInterval");

  /* "openzwave.pyx":662
 * @param seconds The length of the polling interval in seconds.
 *         '''
 *         self.manager.SetPollInterval(seconds)             # <<<<<<<<<<<<<<
 * 
 * #        bint EnablePoll(ValueID& valueId)
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_seconds); if (unlikely((__pyx_t_1 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SetPollInterval(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setPollInterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":673
 * # Methods for accessing information on indivdual nodes.
 * #
 *     def refreshNodeInfo(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Trigger the fetching of fixed data about a node.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_12refreshNodeInfo(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_12refreshNodeInfo[] = "\nTrigger the fetching of fixed data about a node.\n\nCauses the nodes data to be obtained from the Z-Wave network in the same way\nas if it had just been added.  This method would normally be called\nautomatically by OpenZWave, but if you know that a node has been changed,\ncalling this method will force a refresh of the data held by the library.  This\ncan be especially useful for devices that were asleep when the application was\nfirst run.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return True if the request was sent successfully.\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_12refreshNodeInfo(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("refreshNodeInfo");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("refreshNodeInfo", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "refreshNodeInfo") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("refreshNodeInfo", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.refreshNodeInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":688
 * @return True if the request was sent successfully.
 *         '''
 *         return self.manager.RefreshNodeInfo(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def requestNodeState(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->RefreshNodeInfo(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.refreshNodeInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":690
 *         return self.manager.RefreshNodeInfo(homeid, nodeid)
 * 
 *     def requestNodeState(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Trigger the fetching of dynamic value data for a node.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_13requestNodeState(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_13requestNodeState[] = "\nTrigger the fetching of dynamic value data for a node.\n\nCauses the nodes values to be requested from the Z-Wave network.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_13requestNodeState(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("requestNodeState");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("requestNodeState", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "requestNodeState") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("requestNodeState", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.requestNodeState", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":699
 * @param nodeId The ID of the node to query.
 *         '''
 *         self.manager.RequestNodeState(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeListeningDevice(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->RequestNodeState(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.requestNodeState", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":701
 *         self.manager.RequestNodeState(homeid, nodeid)
 * 
 *     def isNodeListeningDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get whether the node is a listening device that does not go to sleep
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_14isNodeListeningDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_14isNodeListeningDevice[] = "\nGet whether the node is a listening device that does not go to sleep\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return True if it is a listening node.\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_14isNodeListeningDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("isNodeListeningDevice");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isNodeListeningDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeListeningDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeListeningDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.isNodeListeningDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":709
 * @return True if it is a listening node.
 *         '''
 *         return self.manager.IsNodeListeningDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeRoutingDevice(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->IsNodeListeningDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.isNodeListeningDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":711
 *         return self.manager.IsNodeListeningDevice(homeid, nodeid)
 * 
 *     def isNodeRoutingDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get whether the node is a routing device that passes messages to other nodes
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_15isNodeRoutingDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_15isNodeRoutingDevice[] = "\nGet whether the node is a routing device that passes messages to other nodes\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return True if the node is a routing device\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_15isNodeRoutingDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("isNodeRoutingDevice");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isNodeRoutingDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeRoutingDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeRoutingDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.isNodeRoutingDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":719
 * @return True if the node is a routing device
 *         '''
 *         return self.manager.IsNodeRoutingDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeMaxBaudRate(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->IsNodeRoutingDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.isNodeRoutingDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":721
 *         return self.manager.IsNodeRoutingDevice(homeid, nodeid)
 * 
 *     def getNodeMaxBaudRate(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get the maximum baud rate of a nodes communications
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_16getNodeMaxBaudRate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_16getNodeMaxBaudRate[] = "\nGet the maximum baud rate of a nodes communications\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return the baud rate in bits per second.\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_16getNodeMaxBaudRate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeMaxBaudRate");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeMaxBaudRate", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeMaxBaudRate") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeMaxBaudRate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeMaxBaudRate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":729
 * @return the baud rate in bits per second.
 *         '''
 *         return self.manager.GetNodeMaxBaudRate(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeVersion(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyLong_FromUnsignedLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeMaxBaudRate(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeMaxBaudRate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":731
 *         return self.manager.GetNodeMaxBaudRate(homeid, nodeid)
 * 
 *     def getNodeVersion(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get the version number of a node
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_17getNodeVersion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_17getNodeVersion[] = "\nGet the version number of a node\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return the node version number\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_17getNodeVersion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeVersion");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeVersion", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeVersion") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeVersion", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":739
 * @return the node version number
 *         '''
 *         return self.manager.GetNodeVersion(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeSecurity(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeVersion(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":741
 *         return self.manager.GetNodeVersion(homeid, nodeid)
 * 
 *     def getNodeSecurity(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get the security byte for a node.  Bit meanings are still to be determined.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_18getNodeSecurity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_18getNodeSecurity[] = "\nGet the security byte for a node.  Bit meanings are still to be determined.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return the node security byte\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_18getNodeSecurity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeSecurity");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeSecurity", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeSecurity") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeSecurity", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeSecurity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":749
 * @return the node security byte
 *         '''
 *         return self.manager.GetNodeSecurity(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeBasic(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeSecurity(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeSecurity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":751
 *         return self.manager.GetNodeSecurity(homeid, nodeid)
 * 
 *     def getNodeBasic(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get the basic type of a node.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_19getNodeBasic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_19getNodeBasic[] = "\nGet the basic type of a node.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return the node basic type.\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_19getNodeBasic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeBasic");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeBasic", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeBasic") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeBasic", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeBasic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":759
 * @return the node basic type.
 *         '''
 *         return self.manager.GetNodeBasic(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeGeneric(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeBasic(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeBasic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":761
 *         return self.manager.GetNodeBasic(homeid, nodeid)
 * 
 *     def getNodeGeneric(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get the generic type of a node.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_20getNodeGeneric(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_20getNodeGeneric[] = "\nGet the generic type of a node.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return the node generic type.\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_20getNodeGeneric(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeGeneric");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeGeneric", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeGeneric") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeGeneric", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeGeneric", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":769
 * @return the node generic type.
 *         '''
 *         return self.manager.GetNodeGeneric(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeSpecific(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeGeneric(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeGeneric", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":771
 *         return self.manager.GetNodeGeneric(homeid, nodeid)
 * 
 *     def getNodeSpecific(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get the specific type of a node.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_21getNodeSpecific(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_21getNodeSpecific[] = "\nGet the specific type of a node.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return the node specific type.\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_21getNodeSpecific(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeSpecific");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeSpecific", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeSpecific") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeSpecific", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeSpecific", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":779
 * @return the node specific type.
 *         '''
 *         return self.manager.GetNodeSpecific(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeType(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeSpecific(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeSpecific", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":781
 *         return self.manager.GetNodeSpecific(homeid, nodeid)
 * 
 *     def getNodeType(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get a human-readable label describing the node
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_22getNodeType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_22getNodeType[] = "\nGet a human-readable label describing the node\n\nThe label is taken from the Z-Wave specific, generic or basic type, depending\non which of those values are specified by the node.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return A string containing the label text.\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_22getNodeType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeType");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeType", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeType") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeType", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":792
 * @return A string containing the label text.
 *         '''
 *         cdef string c_string = self.manager.GetNodeType(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeType(__pyx_t_1, __pyx_t_2);

  /* "openzwave.pyx":793
 *         '''
 *         cdef string c_string = self.manager.GetNodeType(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeNeighbors(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":795
 *         return c_string.c_str()
 * 
 *     def getNodeNeighbors(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Retrieve a list of neighbor node ids
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_23getNodeNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_23getNodeNeighbors[] = "\nRetrieve a list of neighbor node ids\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return A tuple containing neighboring node IDs\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_23getNodeNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_retval = NULL;
  __pyx_t_9openzwave_uint8 **__pyx_v_dbuf;
  __pyx_t_9openzwave_uint32 __pyx_v_count;
  __pyx_t_9openzwave_uint8 *__pyx_v_p;
  PyObject *__pyx_v_data = NULL;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeNeighbors");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeNeighbors", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeNeighbors") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeNeighbors", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeNeighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":803
 * @return A tuple containing neighboring node IDs
 *         '''
 *         retval = None             # <<<<<<<<<<<<<<
 *         # TODO: proper initialization of this pointer.  Underlying code creates new uint8[] at this address, but segfaults if passed in value is null.  Boy, is my C rusty.
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8))
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_retval = Py_None;

  /* "openzwave.pyx":805
 *         retval = None
 *         # TODO: proper initialization of this pointer.  Underlying code creates new uint8[] at this address, but segfaults if passed in value is null.  Boy, is my C rusty.
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8))             # <<<<<<<<<<<<<<
 *         # return value is pointer to uint8[]
 *         cdef uint32 count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)
 */
  __pyx_v_dbuf = ((__pyx_t_9openzwave_uint8 **)malloc((sizeof(__pyx_t_9openzwave_uint8))));

  /* "openzwave.pyx":807
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8))
 *         # return value is pointer to uint8[]
 *         cdef uint32 count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)             # <<<<<<<<<<<<<<
 *         cdef uint8* p
 *         if count:
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_count = ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeNeighbors(__pyx_t_1, __pyx_t_2, __pyx_v_dbuf);

  /* "openzwave.pyx":809
 *         cdef uint32 count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)
 *         cdef uint8* p
 *         if count:             # <<<<<<<<<<<<<<
 *             try:
 *                 data = set()
 */
  if (__pyx_v_count) {

    /* "openzwave.pyx":810
 *         cdef uint8* p
 *         if count:
 *             try:             # <<<<<<<<<<<<<<
 *                 data = set()
 *                 p = dbuf[0] # p is now pointing at first element of array
 */
    /*try:*/ {

      /* "openzwave.pyx":811
 *         if count:
 *             try:
 *                 data = set()             # <<<<<<<<<<<<<<
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(0, count):
 */
      __pyx_t_3 = PySet_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L8;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __pyx_v_data = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "openzwave.pyx":812
 *             try:
 *                 data = set()
 *                 p = dbuf[0] # p is now pointing at first element of array             # <<<<<<<<<<<<<<
 *                 for i in range(0, count):
 *                     data.add(p[0])
 */
      __pyx_v_p = (__pyx_v_dbuf[0]);

      /* "openzwave.pyx":813
 *                 data = set()
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(0, count):             # <<<<<<<<<<<<<<
 *                     data.add(p[0])
 *                     p += 1
 */
      __pyx_t_1 = __pyx_v_count;
      for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "openzwave.pyx":814
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(0, count):
 *                     data.add(p[0])             # <<<<<<<<<<<<<<
 *                     p += 1
 *                 retval = tuple(data)
 */
        if (unlikely(((PyObject *)__pyx_v_data) == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 814; __pyx_clineno = __LINE__; goto __pyx_L8;} 
        }
        __pyx_t_3 = PyInt_FromLong((__pyx_v_p[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 814; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = PySet_Add(__pyx_v_data, __pyx_t_3); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 814; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "openzwave.pyx":815
 *                 for i in range(0, count):
 *                     data.add(p[0])
 *                     p += 1             # <<<<<<<<<<<<<<
 *                 retval = tuple(data)
 *             finally:
 */
        __pyx_v_p = (__pyx_v_p + 1);
      }

      /* "openzwave.pyx":816
 *                     data.add(p[0])
 *                     p += 1
 *                 retval = tuple(data)             # <<<<<<<<<<<<<<
 *             finally:
 *                 # TODO: caller is responsible for deleting returned array via call to delete()
 */
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L8;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __Pyx_INCREF(((PyObject *)__pyx_v_data));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_data));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_data));
      __pyx_t_6 = PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L8;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_v_retval);
      __pyx_v_retval = __pyx_t_6;
      __pyx_t_6 = 0;
    }

    /* "openzwave.pyx":819
 *             finally:
 *                 # TODO: caller is responsible for deleting returned array via call to delete()
 *                 pass             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */
    /*finally:*/ {
      int __pyx_why;
      PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;
      int __pyx_exc_lineno;
      __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
      __pyx_why = 0; goto __pyx_L9;
      __pyx_L8: {
        __pyx_why = 4;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
        __pyx_exc_lineno = __pyx_lineno;
        goto __pyx_L9;
      }
      __pyx_L9:;
      switch (__pyx_why) {
        case 4: {
          __Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);
          __pyx_lineno = __pyx_exc_lineno;
          __pyx_exc_type = 0;
          __pyx_exc_value = 0;
          __pyx_exc_tb = 0;
          goto __pyx_L1_error;
        }
      }
    }
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "openzwave.pyx":820
 *                 # TODO: caller is responsible for deleting returned array via call to delete()
 *                 pass
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     def getNodeManufacturerName(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retval);
  __pyx_r = __pyx_v_retval;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeNeighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_retval);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":822
 *         return retval
 * 
 *     def getNodeManufacturerName(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get the manufacturer name of a device
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_24getNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_24getNodeManufacturerName[] = "\nGet the manufacturer name of a device\n\nThe manufacturer name would normally be handled by the Manufacturer Specific\ncommmand class, taking the manufacturer ID reported by the device and using it\nto look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return A string containing the nodes manufacturer name.\n@see setNodeManufacturerName, getNodeProductName, setNodeProductName\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_24getNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_manufacturer_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeManufacturerName");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeManufacturerName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeManufacturerName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeManufacturerName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeManufacturerName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":839
 * @see setNodeManufacturerName, getNodeProductName, setNodeProductName
 *         '''
 *         cdef string manufacturer_string = self.manager.GetNodeManufacturerName(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return manufacturer_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_manufacturer_string = ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeManufacturerName(__pyx_t_1, __pyx_t_2);

  /* "openzwave.pyx":840
 *         '''
 *         cdef string manufacturer_string = self.manager.GetNodeManufacturerName(homeid, nodeid)
 *         return manufacturer_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeProductName(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_manufacturer_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeManufacturerName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":842
 *         return manufacturer_string.c_str()
 * 
 *     def getNodeProductName(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get the product name of a device
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_25getNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_25getNodeProductName[] = "\nGet the product name of a device\n\nThe product name would normally be handled by the Manufacturer Specific\ncommmand class, taking the product Type and ID reported by the device and using\nit to look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return A string containing the nodes product name.\n@see setNodeProductName, getNodeManufacturerName, setNodeManufacturerName\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_25getNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_productname_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeProductName");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeProductName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeProductName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeProductName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeProductName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":859
 * @see setNodeProductName, getNodeManufacturerName, setNodeManufacturerName
 *         '''
 *         cdef string productname_string = self.manager.GetNodeProductName(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return productname_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_productname_string = ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeProductName(__pyx_t_1, __pyx_t_2);

  /* "openzwave.pyx":860
 *         '''
 *         cdef string productname_string = self.manager.GetNodeProductName(homeid, nodeid)
 *         return productname_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeName(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_productname_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeProductName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":862
 *         return productname_string.c_str()
 * 
 *     def getNodeName(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get the name of a node
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_26getNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_26getNodeName[] = "\nGet the name of a node\n\nThe node name is a user-editable label for the node that would normally be\nhandled by the Node Naming commmand class, but many devices do not support it.\nSo that a node can always be named, OpenZWave stores it with the node data, and\nprovides access through this method and SetNodeName, rather than reporting it\nvia a command class Value object.  The maximum length of a node name is 16\ncharacters.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return A string containing the node name.\n@see setNodeName, getNodeLocation, setNodeLocation\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_26getNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeName");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":878
 * @see setNodeName, getNodeLocation, setNodeLocation
 *         '''
 *         cdef string c_string = self.manager.GetNodeName(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeName(__pyx_t_1, __pyx_t_2);

  /* "openzwave.pyx":879
 *         '''
 *         cdef string c_string = self.manager.GetNodeName(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeLocation(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":881
 *         return c_string.c_str()
 * 
 *     def getNodeLocation(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get the location of a node
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_27getNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_27getNodeLocation[] = "\nGet the location of a node\n\nThe node location is a user-editable string that would normally be handled by\nthe Node Naming commmand class, but many devices do not support it.  So that a\nnode can always report its location, OpenZWave stores it with the node data,\nand provides access through this method and SetNodeLocation, rather than\nreporting it via a command class Value object.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return A string containing the nodes location.\n@see setNodeLocation, getNodeName, setNodeName\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_27getNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeLocation");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeLocation", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeLocation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeLocation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeLocation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":896
 * @see setNodeLocation, getNodeName, setNodeName
 *         '''
 *         cdef string c_string = self.manager.GetNodeLocation(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeLocation(__pyx_t_1, __pyx_t_2);

  /* "openzwave.pyx":897
 *         '''
 *         cdef string c_string = self.manager.GetNodeLocation(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeManufacturerId(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeLocation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":899
 *         return c_string.c_str()
 * 
 *     def getNodeManufacturerId(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get the manufacturer ID of a device
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_28getNodeManufacturerId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_28getNodeManufacturerId[] = "\nGet the manufacturer ID of a device\n\nThe manufacturer ID is a four digit hex code and would normally be handled by\nthe Manufacturer-Specific commmand class, but not all devices support it.\nAlthough the value reported by this method will be an empty string if the\ncommand class is not supported and cannot be set by the user, the manufacturer\nID is still stored with the node data (rather than being reported via a command\nclass Value object) to retain a consistent approach with the other manufacturer\nspecific data.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return A string containing the nodes manufacturer ID, or an empty string if\nthe manufactuer-specific command class is not supported by the device.\n@see getNodeProductType, getNodeProductId, getNodeManufacturerName,\ngetNodeProductName\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_28getNodeManufacturerId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeManufacturerId");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeManufacturerId", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeManufacturerId") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeManufacturerId", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeManufacturerId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":918
 * getNodeProductName
 *         '''
 *         cdef string c_string = self.manager.GetNodeManufacturerId(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeManufacturerId(__pyx_t_1, __pyx_t_2);

  /* "openzwave.pyx":919
 *         '''
 *         cdef string c_string = self.manager.GetNodeManufacturerId(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeProductType(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeManufacturerId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":921
 *         return c_string.c_str()
 * 
 *     def getNodeProductType(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get the product type of a device
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_29getNodeProductType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_29getNodeProductType[] = "\nGet the product type of a device\n\nThe product type is a four digit hex code and would normally be handled by the\nManufacturer Specific commmand class, but not all devices support it.  Although\nthe value reported by this method will be an empty string if the command class\nis not supported and cannot be set by the user, the product type is still\nstored with the node data (rather than being reported via a command class Value\nobject) to retain a consistent approach with the other manufacturer specific\ndata.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return A string containing the nodes product type, or an empty string if the\nmanufactuer-specific command class is not supported by the device.\n@see getNodeManufacturerId, getNodeProductId, getNodeManufacturerName,\ngetNodeProductName\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_29getNodeProductType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeProductType");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeProductType", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 921; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeProductType") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 921; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeProductType", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 921; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeProductType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":940
 * getNodeProductName
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductType(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeProductType(__pyx_t_1, __pyx_t_2);

  /* "openzwave.pyx":941
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductType(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeProductId(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeProductType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":943
 *         return c_string.c_str()
 * 
 *     def getNodeProductId(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get the product ID of a device
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_30getNodeProductId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_30getNodeProductId[] = "\nGet the product ID of a device\n\nThe product ID is a four digit hex code and would normally be handled by the\nManufacturer-Specific commmand class, but not all devices support it.  Although\nthe value reported by this method will be an empty string if the command class\nis not supported and cannot be set by the user, the product ID is still stored\nwith the node data (rather than being reported via a command class Value\nobject)  to retain a consistent approach with the other manufacturer specific\ndata.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return A string containing the nodes product ID, or an empty string if the\nmanufactuer-specific command class is not supported by the device.\n@see getNodeManufacturerId, getNodeProductType, getNodeManufacturerName,\ngetNodeProductName\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_30getNodeProductId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeProductId");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeProductId", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeProductId") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeProductId", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeProductId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":962
 * getNodeProductName
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductId(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeProductId(__pyx_t_1, __pyx_t_2);

  /* "openzwave.pyx":963
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductId(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def setNodeManufacturerName(self, homeid, nodeid, char *manufacturerName):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeProductId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":965
 *         return c_string.c_str()
 * 
 *     def setNodeManufacturerName(self, homeid, nodeid, char *manufacturerName):             # <<<<<<<<<<<<<<
 *         '''
 * Set the manufacturer name of a device
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_31setNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_31setNodeManufacturerName[] = "\nSet the manufacturer name of a device\n\nThe manufacturer name would normally be handled by the Manufacturer Specific\ncommmand class, taking the manufacturer ID reported by the device and using it\nto look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@param manufacturerName A string containing the nodess manufacturer name.\n@see getNodeManufacturerName, getNodeProductName, setNodeProductName\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_31setNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_manufacturerName;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__manufacturerName,0};
  __Pyx_RefNannySetupContext("setNodeManufacturerName");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeManufacturerName", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 965; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__manufacturerName);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeManufacturerName", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 965; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeManufacturerName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 965; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_manufacturerName = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_manufacturerName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 965; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeManufacturerName", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 965; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setNodeManufacturerName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":982
 * @see getNodeManufacturerName, getNodeProductName, setNodeProductName
 *         '''
 *         self.manager.SetNodeManufacturerName(homeid, nodeid, string(manufacturerName))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeProductName(self, homeid, nodeid, char *productName):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SetNodeManufacturerName(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_manufacturerName));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setNodeManufacturerName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":984
 *         self.manager.SetNodeManufacturerName(homeid, nodeid, string(manufacturerName))
 * 
 *     def setNodeProductName(self, homeid, nodeid, char *productName):             # <<<<<<<<<<<<<<
 *         '''
 * Set the product name of a device
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_32setNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_32setNodeProductName[] = "\nSet the product name of a device\n\nThe product name would normally be handled by the Manufacturer Specific\ncommmand class, taking the product Type and ID reported by the device and using\nit to look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@param productName A string containing the nodes product name.\n@see getNodeProductName, getNodeManufacturerName, setNodeManufacturerName\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_32setNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_productName;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__productName,0};
  __Pyx_RefNannySetupContext("setNodeProductName");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeProductName", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__productName);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeProductName", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeProductName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_productName = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_productName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeProductName", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setNodeProductName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1001
 * @see getNodeProductName, getNodeManufacturerName, setNodeManufacturerName
 *         '''
 *         self.manager.SetNodeProductName(homeid, nodeid, string(productName))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeName(self, homeid, nodeid, char *name):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SetNodeProductName(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_productName));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setNodeProductName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1003
 *         self.manager.SetNodeProductName(homeid, nodeid, string(productName))
 * 
 *     def setNodeName(self, homeid, nodeid, char *name):             # <<<<<<<<<<<<<<
 *         '''
 * Set the name of a node
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_33setNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_33setNodeName[] = "\nSet the name of a node\n\nThe node name is a user-editable label for the node that would normally be\nhandled by the Node Naming commmand class, but many devices do not support it.\nSo that a node can always be named, OpenZWave stores it with the node data, and\nprovides access through this method and GetNodeName, rather than reporting it\nvia a command class Value object.  If the device does support the Node Naming\ncommand class, the new name will be sent to the node.  The maximum length of a\nnode name is 16 characters.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@param nodeName A string containing the nodes name.\n@see getNodeName, getNodeLocation, setNodeLocation\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_33setNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("setNodeName");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeName", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeName", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_name = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeName", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setNodeName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1020
 * @see getNodeName, getNodeLocation, setNodeLocation
 *         '''
 *         self.manager.SetNodeName(homeid, nodeid, string(name))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeLocation(self, homeid, nodeid, char *location):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SetNodeName(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_name));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setNodeName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1022
 *         self.manager.SetNodeName(homeid, nodeid, string(name))
 * 
 *     def setNodeLocation(self, homeid, nodeid, char *location):             # <<<<<<<<<<<<<<
 *         '''
 * Set the location of a node
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_34setNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_34setNodeLocation[] = "\nSet the location of a node\n\nThe node location is a user-editable string that would normally be handled by\nthe Node Naming commmand class, but many devices do not support it.  So that a\nnode can always report its location, OpenZWave stores it with the node data,\nand provides access through this method and GetNodeLocation, rather than\nreporting it via a command class Value object.  If the device does support the\nNode Naming command class, the new location will be sent to the node.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@param location A string containing the nodes location.\n@see getNodeLocation, getNodeName, setNodeName\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_34setNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_location;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__location,0};
  __Pyx_RefNannySetupContext("setNodeLocation");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeLocation", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__location);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeLocation", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeLocation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_location = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_location) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeLocation", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setNodeLocation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1038
 * @see getNodeLocation, getNodeName, setNodeName
 *         '''
 *         self.manager.SetNodeLocation(homeid, nodeid, string(location))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeOn(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SetNodeLocation(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_location));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setNodeLocation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1040
 *         self.manager.SetNodeLocation(homeid, nodeid, string(location))
 * 
 *     def setNodeOn(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Turns a node on
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_35setNodeOn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_35setNodeOn[] = "\nTurns a node on\n\nThis is a helper method to simplify basic control of a node.  It is the\nequivalent of changing the level reported by the nodes Basic command class to\n255, and will generate a ValueChanged notification from that class.  This\ncommand will turn on the device at its last known level, if supported by the\ndevice, otherwise it will turn it on at 100%.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to be changed.\n@see setNodeOff, setNodeLevel\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_35setNodeOn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("setNodeOn");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeOn", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeOn") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeOn", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setNodeOn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1054
 * @see setNodeOff, setNodeLevel
 *         '''
 *         self.manager.SetNodeOn(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def setNodeOff(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SetNodeOn(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setNodeOn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1056
 *         self.manager.SetNodeOn(homeid, nodeid)
 * 
 *     def setNodeOff(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Turns a node off
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_36setNodeOff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_36setNodeOff[] = "\nTurns a node off\n\nThis is a helper method to simplify basic control of a node.  It is the\nequivalent of changing the level reported by the nodes Basic command class to\nzero, and will generate a ValueChanged notification from that class.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to be changed.\n@see setNodeOn, setNodeLevel\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_36setNodeOff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("setNodeOff");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeOff", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeOff") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeOff", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setNodeOff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1068
 * @see setNodeOn, setNodeLevel
 *         '''
 *         self.manager.SetNodeOff(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def setNodeLevel(self, homeid, nodeid, level):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SetNodeOff(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setNodeOff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1070
 *         self.manager.SetNodeOff(homeid, nodeid)
 * 
 *     def setNodeLevel(self, homeid, nodeid, level):             # <<<<<<<<<<<<<<
 *         '''
 * Sets the basic level of a node
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_37setNodeLevel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_37setNodeLevel[] = "\nSets the basic level of a node\n\nThis is a helper method to simplify basic control of a node.  It is the\nequivalent of changing the value reported by the nodes Basic command class\nand will generate a ValueChanged notification from that class.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to be changed.\n@param level The level to set the node.  Valid values are 0-99 and 255.  Zero\nis off and 99 is fully on.  255 will turn on the device at its last known level\n(if supported).\n\n@see setNodeOn, setNodeOff\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_37setNodeLevel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_level = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  __pyx_t_9openzwave_uint8 __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__level,0};
  __Pyx_RefNannySetupContext("setNodeLevel");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeLevel", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1070; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__level);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeLevel", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1070; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeLevel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1070; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_level = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeLevel", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1070; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setNodeLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1086
 * @see setNodeOn, setNodeOff
 *         '''
 *         self.manager.SetNodeLevel(homeid, nodeid, level)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeInfoReceived(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_level); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SetNodeLevel(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setNodeLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1088
 *         self.manager.SetNodeLevel(homeid, nodeid, level)
 * 
 *     def isNodeInfoReceived(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Get whether the node information has been received
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_38isNodeInfoReceived(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_38isNodeInfoReceived[] = "\nGet whether the node information has been received\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@return True if the node information has been received yet\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_38isNodeInfoReceived(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("isNodeInfoReceived");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isNodeInfoReceived", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeInfoReceived") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeInfoReceived", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.isNodeInfoReceived", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1096
 * @return True if the node information has been received yet
 *         '''
 *         return self.manager.IsNodeInfoReceived(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->IsNodeInfoReceived(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.isNodeInfoReceived", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1099
 * 
 * 
 *     def getNodeClassInformation(self, homeid, nodeid, commandClassId, className = None, classVersion = None):             # <<<<<<<<<<<<<<
 *         '''
 * Helper method to return whether a particular class is available in a node
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_39getNodeClassInformation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_39getNodeClassInformation[] = "\nHelper method to return whether a particular class is available in a node\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to query.\n@param commandClassId control class to query\n@param className (optional, default=None) specific name of class to query\n@param classVersion (optional, default=None) specific class version\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_39getNodeClassInformation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_commandClassId = 0;
  PyObject *__pyx_v_className = 0;
  PyObject *__pyx_v_classVersion = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  __pyx_t_9openzwave_uint8 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__commandClassId,&__pyx_n_s__className,&__pyx_n_s__classVersion,0};
  __Pyx_RefNannySetupContext("getNodeClassInformation");
  {
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeClassInformation", 0, 3, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1099; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__commandClassId);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeClassInformation", 0, 3, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1099; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__className);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__classVersion);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeClassInformation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1099; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_commandClassId = values[2];
    __pyx_v_className = values[3];
    __pyx_v_classVersion = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeClassInformation", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1099; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNodeClassInformation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1109
 * @param classVersion (optional, default=None) specific class version
 *         '''
 *         return self.manager.GetNodeClassInformation(homeid, nodeid, commandClassId)             # <<<<<<<<<<<<<<
 * 
 * #
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_commandClassId); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyBool_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNodeClassInformation(__pyx_t_1, __pyx_t_2, __pyx_t_3, NULL)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openzwave.PyManager.getNodeClassInformation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1118
 * # in the ValueAdded Notification callback when the the value was first discovered by OpenZWave.
 * 
 *     def setValue(self, id, value):             # <<<<<<<<<<<<<<
 *         '''
 * Sets the value of a device valueid.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_40setValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_40setValue[] = "\nSets the value of a device valueid.\nDue to the possibility of a device being asleep, the command is assumed to suceeed, and the value\nheld by the node is updated directly.  This will be reverted by a future status message from the device\nif the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.\n@param id the ID of a value.\n@param value the value to set\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_40setValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_value = 0;
  float __pyx_v_type_float;
  int __pyx_v_type_bool;
  __pyx_t_9openzwave_uint8 __pyx_v_type_byte;
  std::string __pyx_v_type_string;
  PyObject *__pyx_v_datatype = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __pyx_t_9openzwave_uint8 __pyx_t_6;
  float __pyx_t_7;
  char *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__value,0};
  __Pyx_RefNannySetupContext("setValue");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setValue", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1118; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setValue") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1118; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_id = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValue", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1118; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1134
 *         cdef string type_string
 * 
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_9openzwave_values_map.find(__pyx_t_1) != __pyx_v_9openzwave_values_map.end());
  if (__pyx_t_2) {

    /* "openzwave.pyx":1135
 * 
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]             # <<<<<<<<<<<<<<
 * 
 *             if datatype == "Bool":
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_9openzwave_values_map.at(__pyx_t_1).GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_datatype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "openzwave.pyx":1137
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 * 
 *             if datatype == "Bool":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 self.manager.SetValue(values_map.at(id), type_bool)
 */
    __pyx_t_2 = __Pyx_PyString_Equals(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Bool), Py_EQ); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "openzwave.pyx":1138
 * 
 *             if datatype == "Bool":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 self.manager.SetValue(values_map.at(id), type_bool)
 *             elif datatype == "Byte":
 */
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_2;

      /* "openzwave.pyx":1139
 *             if datatype == "Bool":
 *                 type_bool = value
 *                 self.manager.SetValue(values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *             elif datatype == "Byte":
 *                 type_byte = value
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_9openzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);
      goto __pyx_L7;
    }

    /* "openzwave.pyx":1140
 *                 type_bool = value
 *                 self.manager.SetValue(values_map.at(id), type_bool)
 *             elif datatype == "Byte":             # <<<<<<<<<<<<<<
 *                 type_byte = value
 *                 self.manager.SetValue(values_map.at(id), type_byte)
 */
    __pyx_t_2 = __Pyx_PyString_Equals(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Byte), Py_EQ); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "openzwave.pyx":1141
 *                 self.manager.SetValue(values_map.at(id), type_bool)
 *             elif datatype == "Byte":
 *                 type_byte = value             # <<<<<<<<<<<<<<
 *                 self.manager.SetValue(values_map.at(id), type_byte)
 *             elif datatype == "Decimal":
 */
      __pyx_t_6 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_value); if (unlikely((__pyx_t_6 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_byte = __pyx_t_6;

      /* "openzwave.pyx":1142
 *             elif datatype == "Byte":
 *                 type_byte = value
 *                 self.manager.SetValue(values_map.at(id), type_byte)             # <<<<<<<<<<<<<<
 *             elif datatype == "Decimal":
 *                 type_float = value
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_9openzwave_values_map.at(__pyx_t_1), __pyx_v_type_byte);
      goto __pyx_L7;
    }

    /* "openzwave.pyx":1143
 *                 type_byte = value
 *                 self.manager.SetValue(values_map.at(id), type_byte)
 *             elif datatype == "Decimal":             # <<<<<<<<<<<<<<
 *                 type_float = value
 *                 self.manager.SetValue(values_map.at(id), type_float)
 */
    __pyx_t_2 = __Pyx_PyString_Equals(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Decimal), Py_EQ); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "openzwave.pyx":1144
 *                 self.manager.SetValue(values_map.at(id), type_byte)
 *             elif datatype == "Decimal":
 *                 type_float = value             # <<<<<<<<<<<<<<
 *                 self.manager.SetValue(values_map.at(id), type_float)
 *             # TODO: this gives me an "ambiguous overloaded method", I don't understand why.
 */
      __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_float = __pyx_t_7;

      /* "openzwave.pyx":1145
 *             elif datatype == "Decimal":
 *                 type_float = value
 *                 self.manager.SetValue(values_map.at(id), type_float)             # <<<<<<<<<<<<<<
 *             # TODO: this gives me an "ambiguous overloaded method", I don't understand why.
 *             #elif datatype == "Int":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_9openzwave_values_map.at(__pyx_t_1), __pyx_v_type_float);
      goto __pyx_L7;
    }

    /* "openzwave.pyx":1153
 *             #    type_short = value
 *             #    self.manager.SetValue(values_map.at(id), type_short)
 *             elif datatype == "String":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 self.manager.SetValue(values_map.at(id), type_string)
 */
    __pyx_t_2 = __Pyx_PyString_Equals(__pyx_v_datatype, ((PyObject *)__pyx_n_s__String), Py_EQ); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "openzwave.pyx":1154
 *             #    self.manager.SetValue(values_map.at(id), type_short)
 *             elif datatype == "String":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 self.manager.SetValue(values_map.at(id), type_string)
 * 
 */
      __pyx_t_8 = PyBytes_AsString(__pyx_v_value); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_8);

      /* "openzwave.pyx":1155
 *             elif datatype == "String":
 *                 type_string = string(value)
 *                 self.manager.SetValue(values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 * 
 * #        string GetValueLabel(ValueID& valueid)
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_9openzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);
      goto __pyx_L7;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openzwave.PyManager.setValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_datatype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1213
 * # not routed, the message might not otherwise reach all the nodes).
 * #
 *     def switchAllOn(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Switch all devices on.  All devices that support the SwitchAll command class
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_41switchAllOn(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_41switchAllOn[] = "\nSwitch all devices on.  All devices that support the SwitchAll command class\nwill be turned on.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_41switchAllOn(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("switchAllOn");

  /* "openzwave.pyx":1220
 * @param homeId The Home ID of the Z-Wave controller that manages the node.
 *         '''
 *         self.manager.SwitchAllOn(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def switchAllOff(self, homeid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SwitchAllOn(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.switchAllOn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1222
 *         self.manager.SwitchAllOn(homeid)
 * 
 *     def switchAllOff(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Switch all devices off.  All devices that support the SwitchAll command class
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_42switchAllOff(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_42switchAllOff[] = "\nSwitch all devices off.  All devices that support the SwitchAll command class\nwill be turned off.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_42switchAllOff(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("switchAllOff");

  /* "openzwave.pyx":1229
 * @param homeId The Home ID of the Z-Wave controller that manages the node.
 *         '''
 *         self.manager.SwitchAllOff(homeid)             # <<<<<<<<<<<<<<
 * 
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SwitchAllOff(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.switchAllOff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1242
 * # parameters for every Z-Wave.  See the config folder in the project source code for examples.
 * #
 *     def setConfigParam(self, homeid, nodeid, param, value):             # <<<<<<<<<<<<<<
 *         '''
 * Set the value of a configurable parameter in a device.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_43setConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_43setConfigParam[] = "\nSet the value of a configurable parameter in a device.\n\nSome devices have various parameters that can be configured to control the\ndevice behaviour.  These are not reported by the device over the Z-Wave network\nbut can usually be found in the devices user manual.  This method returns\nimmediately, without waiting for confirmation from the device that the change\nhas been made.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to configure.\n@param param The index of the parameter.\n@param value The value to which the parameter should be set.\n@return true if the a message setting the value was sent to the device.\n@see requestConfigParam\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_43setConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_param = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  __pyx_t_9openzwave_uint8 __pyx_t_3;
  __pyx_t_9openzwave_uint32 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__param,&__pyx_n_s__value,0};
  __Pyx_RefNannySetupContext("setConfigParam");
  {
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setConfigParam", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__param);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setConfigParam", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setConfigParam", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setConfigParam") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_param = values[2];
    __pyx_v_value = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setConfigParam", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.setConfigParam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1259
 * @see requestConfigParam
 *         '''
 *         return self.manager.SetConfigParam(homeid, nodeid, param, value)             # <<<<<<<<<<<<<<
 * 
 *     def requestConfigParam(self, homeid, nodeid, param):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_param); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_value); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyBool_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SetConfigParam(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openzwave.PyManager.setConfigParam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1261
 *         return self.manager.SetConfigParam(homeid, nodeid, param, value)
 * 
 *     def requestConfigParam(self, homeid, nodeid, param):             # <<<<<<<<<<<<<<
 *         '''
 * Request the value of a configurable parameter from a device.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_44requestConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_44requestConfigParam[] = "\nRequest the value of a configurable parameter from a device.\n\nSome devices have various parameters that can be configured to control the\ndevice behaviour.  These are not reported by the device over the Z-Wave network\nbut can usually be found in the devices user manual.  This method requests\nthe value of a parameter from the device, and then returns immediately,\nwithout waiting for a response.  If the parameter index is valid for this\ndevice, and the device is awake, the value will eventually be reported via a\nValueChanged notification callback.  The ValueID reported in the callback will\nhave an index set the same as _param and a command class set to the same value\nas returned by a call to Configuration::StaticGetCommandClassId.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to configure.\n@param param The index of the parameter.\n@see setConfigParam, valueID, notification\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_44requestConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_param = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  __pyx_t_9openzwave_uint8 __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__param,0};
  __Pyx_RefNannySetupContext("requestConfigParam");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("requestConfigParam", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__param);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("requestConfigParam", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "requestConfigParam") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_param = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("requestConfigParam", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.requestConfigParam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1280
 * @see setConfigParam, valueID, notification
 *         '''
 *         self.manager.RequestConfigParam(homeid, nodeid, param)             # <<<<<<<<<<<<<<
 * 
 *     def requestAllConfigParams(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_param); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->RequestConfigParam(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.requestConfigParam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1282
 *         self.manager.RequestConfigParam(homeid, nodeid, param)
 * 
 *     def requestAllConfigParams(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Request the values of all known configurable parameters from a device.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_45requestAllConfigParams(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_45requestAllConfigParams[] = "\nRequest the values of all known configurable parameters from a device.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node to configure.\n@see SetConfigParam, ValueID, Notification\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_45requestAllConfigParams(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("requestAllConfigParams");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("requestAllConfigParams", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1282; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "requestAllConfigParams") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1282; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("requestAllConfigParams", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1282; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.requestAllConfigParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1290
 * @see SetConfigParam, ValueID, Notification
 *         '''
 *         self.manager.RequestAllConfigParams(homeid, nodeid)             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->RequestAllConfigParams(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.requestAllConfigParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1297
 * # Methods for accessing device association groups.
 * #
 *     def getNumGroups(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Gets the number of association groups reported by this node
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_46getNumGroups(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_46getNumGroups[] = "\nGets the number of association groups reported by this node\n\nIn Z-Wave, groups are numbered starting from one.  For example, if a call to\nGetNumGroups returns 4, the _groupIdx value to use in calls to GetAssociations\nAddAssociation and RemoveAssociation will be a number between 1 and 4.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node whose groups we are interested in.\n@return The number of groups.\n@see getAssociations, getMaxAssociations, addAssociation, removeAssociation\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_46getNumGroups(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNumGroups");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNumGroups", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNumGroups") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNumGroups", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getNumGroups", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1310
 * @see getAssociations, getMaxAssociations, addAssociation, removeAssociation
 *         '''
 *         return self.manager.GetNumGroups(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getAssociations(self, homeid, nodeid, groupidx):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetNumGroups(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openzwave.PyManager.getNumGroups", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1312
 *         return self.manager.GetNumGroups(homeid, nodeid)
 * 
 *     def getAssociations(self, homeid, nodeid, groupidx):             # <<<<<<<<<<<<<<
 *         '''
 * Gets the associations for a group
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_47getAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_47getAssociations[] = "\nGets the associations for a group\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node whose associations we are interested in.\n@param groupIdx one-based index of the group (because Z-Wave product manuals\nuse one-based group numbering).\n@return A tuple containing IDs of members of the group\n@see getNumGroups, addAssociation, removeAssociation, getMaxAssociations\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_47getAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  PyObject *__pyx_v_retval = NULL;
  __pyx_t_9openzwave_uint8 **__pyx_v_dbuf;
  __pyx_t_9openzwave_uint32 __pyx_v_count;
  __pyx_t_9openzwave_uint8 *__pyx_v_p;
  PyObject *__pyx_v_data = NULL;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  __pyx_t_9openzwave_uint8 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__groupidx,0};
  __Pyx_RefNannySetupContext("getAssociations");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getAssociations", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupidx);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getAssociations", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getAssociations") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getAssociations", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getAssociations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1323
 * @see getNumGroups, addAssociation, removeAssociation, getMaxAssociations
 *         '''
 *         retval = None             # <<<<<<<<<<<<<<
 *         # TODO: proper initialization of this pointer.  Underlying code creates new uint8[] at this address, but segfaults if passed in value is null.  Boy, is my C rusty.
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8))
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_retval = Py_None;

  /* "openzwave.pyx":1325
 *         retval = None
 *         # TODO: proper initialization of this pointer.  Underlying code creates new uint8[] at this address, but segfaults if passed in value is null.  Boy, is my C rusty.
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8))             # <<<<<<<<<<<<<<
 *         # return value is pointer to uint8[]
 *         cdef uint32 count = self.manager.GetAssociations(homeid, nodeid, groupidx, dbuf)
 */
  __pyx_v_dbuf = ((__pyx_t_9openzwave_uint8 **)malloc((sizeof(__pyx_t_9openzwave_uint8))));

  /* "openzwave.pyx":1327
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8))
 *         # return value is pointer to uint8[]
 *         cdef uint32 count = self.manager.GetAssociations(homeid, nodeid, groupidx, dbuf)             # <<<<<<<<<<<<<<
 *         cdef uint8* p
 *         if count:
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_count = ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetAssociations(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_v_dbuf);

  /* "openzwave.pyx":1329
 *         cdef uint32 count = self.manager.GetAssociations(homeid, nodeid, groupidx, dbuf)
 *         cdef uint8* p
 *         if count:             # <<<<<<<<<<<<<<
 *             try:
 *                 data = set()
 */
  if (__pyx_v_count) {

    /* "openzwave.pyx":1330
 *         cdef uint8* p
 *         if count:
 *             try:             # <<<<<<<<<<<<<<
 *                 data = set()
 *                 p = dbuf[0] # p is now pointing at first element of array
 */
    /*try:*/ {

      /* "openzwave.pyx":1331
 *         if count:
 *             try:
 *                 data = set()             # <<<<<<<<<<<<<<
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(0, count):
 */
      __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L8;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      __pyx_v_data = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "openzwave.pyx":1332
 *             try:
 *                 data = set()
 *                 p = dbuf[0] # p is now pointing at first element of array             # <<<<<<<<<<<<<<
 *                 for i in range(0, count):
 *                     data.add(p[0])
 */
      __pyx_v_p = (__pyx_v_dbuf[0]);

      /* "openzwave.pyx":1333
 *                 data = set()
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(0, count):             # <<<<<<<<<<<<<<
 *                     data.add(p[0])
 *                     p += 1
 */
      __pyx_t_1 = __pyx_v_count;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_1; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "openzwave.pyx":1334
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(0, count):
 *                     data.add(p[0])             # <<<<<<<<<<<<<<
 *                     p += 1
 *                 retval = tuple(data)
 */
        if (unlikely(((PyObject *)__pyx_v_data) == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L8;} 
        }
        __pyx_t_4 = PyInt_FromLong((__pyx_v_p[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = PySet_Add(__pyx_v_data, __pyx_t_4); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "openzwave.pyx":1335
 *                 for i in range(0, count):
 *                     data.add(p[0])
 *                     p += 1             # <<<<<<<<<<<<<<
 *                 retval = tuple(data)
 *             finally:
 */
        __pyx_v_p = (__pyx_v_p + 1);
      }

      /* "openzwave.pyx":1336
 *                     data.add(p[0])
 *                     p += 1
 *                 retval = tuple(data)             # <<<<<<<<<<<<<<
 *             finally:
 *                 # TODO: caller is responsible for deleting returned array via call to delete()
 */
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1336; __pyx_clineno = __LINE__; goto __pyx_L8;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      __Pyx_INCREF(((PyObject *)__pyx_v_data));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_data));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_data));
      __pyx_t_7 = PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1336; __pyx_clineno = __LINE__; goto __pyx_L8;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_v_retval);
      __pyx_v_retval = __pyx_t_7;
      __pyx_t_7 = 0;
    }

    /* "openzwave.pyx":1339
 *             finally:
 *                 # TODO: caller is responsible for deleting returned array via call to delete()
 *                 pass             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */
    /*finally:*/ {
      int __pyx_why;
      PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;
      int __pyx_exc_lineno;
      __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
      __pyx_why = 0; goto __pyx_L9;
      __pyx_L8: {
        __pyx_why = 4;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
        __pyx_exc_lineno = __pyx_lineno;
        goto __pyx_L9;
      }
      __pyx_L9:;
      switch (__pyx_why) {
        case 4: {
          __Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);
          __pyx_lineno = __pyx_exc_lineno;
          __pyx_exc_type = 0;
          __pyx_exc_value = 0;
          __pyx_exc_tb = 0;
          goto __pyx_L1_error;
        }
      }
    }
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "openzwave.pyx":1340
 *                 # TODO: caller is responsible for deleting returned array via call to delete()
 *                 pass
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     def getMaxAssociations(self, homeid, nodeid, groupidx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retval);
  __pyx_r = __pyx_v_retval;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("openzwave.PyManager.getAssociations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_retval);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1342
 *         return retval
 * 
 *     def getMaxAssociations(self, homeid, nodeid, groupidx):             # <<<<<<<<<<<<<<
 *         '''
 * Gets the maximum number of associations for a group.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_48getMaxAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_48getMaxAssociations[] = "\nGets the maximum number of associations for a group.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node whose associations we are interested in.\n@param groupIdx one-based index of the group (because Z-Wave product manuals\nuse one-based group numbering).\n@return The maximum number of nodes that can be associated into the group.\n@see getNumGroups, addAssociation, removeAssociation, getAssociations\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_48getMaxAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  __pyx_t_9openzwave_uint8 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__groupidx,0};
  __Pyx_RefNannySetupContext("getMaxAssociations");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getMaxAssociations", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupidx);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getMaxAssociations", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getMaxAssociations") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getMaxAssociations", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getMaxAssociations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1353
 * @see getNumGroups, addAssociation, removeAssociation, getAssociations
 *         '''
 *         return self.manager.GetMaxAssociations(homeid, nodeid, groupidx)             # <<<<<<<<<<<<<<
 * 
 *     def getGroupLabel(self, homeid, nodeid, groupidx):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = PyInt_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetMaxAssociations(__pyx_t_1, __pyx_t_2, __pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openzwave.PyManager.getMaxAssociations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1355
 *         return self.manager.GetMaxAssociations(homeid, nodeid, groupidx)
 * 
 *     def getGroupLabel(self, homeid, nodeid, groupidx):             # <<<<<<<<<<<<<<
 *         '''
 * Returns a label for the particular group of a node.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_49getGroupLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_49getGroupLabel[] = "\nReturns a label for the particular group of a node.\n\nThis label is populated by the device specific configuration files.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node whose associations are to be changed.\n@param groupIdx One-based index of the group (because Z-Wave product manuals\nuse one-based group numbering).\n@see getNumGroups, getAssociations, getMaxAssociations, addAssociation\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_49getGroupLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  __pyx_t_9openzwave_uint8 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__groupidx,0};
  __Pyx_RefNannySetupContext("getGroupLabel");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getGroupLabel", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupidx);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getGroupLabel", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getGroupLabel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getGroupLabel", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.getGroupLabel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1367
 * @see getNumGroups, getAssociations, getMaxAssociations, addAssociation
 *         '''
 *         cdef string c_string = self.manager.GetGroupLabel(homeid, nodeid, groupidx)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->GetGroupLabel(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  /* "openzwave.pyx":1368
 *         '''
 *         cdef string c_string = self.manager.GetGroupLabel(homeid, nodeid, groupidx)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def addAssociation(self, homeid, nodeid, groupidx, targetnodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openzwave.PyManager.getGroupLabel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1370
 *         return c_string.c_str()
 * 
 *     def addAssociation(self, homeid, nodeid, groupidx, targetnodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Adds a node to an association group.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_50addAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_50addAssociation[] = "\nAdds a node to an association group.\n\nDue to the possibility of a device being asleep, the command is assumed to\nsuceeed, and the association data held in this class is updated directly.  This\nwill be reverted by a future Association message from the device if the Z-Wave\nmessage actually failed to get through.  Notification callbacks will be sent in\nboth cases.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node whose associations are to be changed.\n@param groupIdx One-based index of the group (because Z-Wave product manuals\nuse one-based group numbering).\n@param targetNodeId Identifier for the node that will be added to the\nassociation group.\n@see getNumGroups, getAssociations, getMaxAssociations, removeAssociation\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_50addAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  PyObject *__pyx_v_targetnodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  __pyx_t_9openzwave_uint8 __pyx_t_3;
  __pyx_t_9openzwave_uint8 __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__groupidx,&__pyx_n_s__targetnodeid,0};
  __Pyx_RefNannySetupContext("addAssociation");
  {
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupidx);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__targetnodeid);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addAssociation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
    __pyx_v_targetnodeid = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.addAssociation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1388
 * @see getNumGroups, getAssociations, getMaxAssociations, removeAssociation
 *         '''
 *         self.manager.AddAssociation(homeid, nodeid, groupidx, targetnodeid)             # <<<<<<<<<<<<<<
 * 
 *     def removeAssociation(self, homeid, nodeid, groupidx, targetnodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_targetnodeid); if (unlikely((__pyx_t_4 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->AddAssociation(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.addAssociation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1390
 *         self.manager.AddAssociation(homeid, nodeid, groupidx, targetnodeid)
 * 
 *     def removeAssociation(self, homeid, nodeid, groupidx, targetnodeid):             # <<<<<<<<<<<<<<
 *         '''
 * Removes a node from an association group.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_51removeAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_51removeAssociation[] = "\nRemoves a node from an association group.\n\nDue to the possibility of a device being asleep, the command is assumed to\nsucceed, and the association data held in this class is updated directly.  This\nwill be reverted by a future Association message from the device if the Z-Wave\nmessage actually failed to get through.   Notification callbacks will be sent\nin both cases.\n\n@param homeId The Home ID of the Z-Wave controller that manages the node.\n@param nodeId The ID of the node whose associations are to be changed.\n@param groupIdx One-based index of the group (because Z-Wave product manuals\nuse one-based group numbering).\n@param targetNodeId Identifier for the node that will be removed from the\nassociation group.\n@see getNumGroups, getAssociations, getMaxAssociations, addAssociation\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_51removeAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  PyObject *__pyx_v_targetnodeid = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  __pyx_t_9openzwave_uint8 __pyx_t_2;
  __pyx_t_9openzwave_uint8 __pyx_t_3;
  __pyx_t_9openzwave_uint8 __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__groupidx,&__pyx_n_s__targetnodeid,0};
  __Pyx_RefNannySetupContext("removeAssociation");
  {
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupidx);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__targetnodeid);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "removeAssociation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
    __pyx_v_targetnodeid = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("openzwave.PyManager.removeAssociation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "openzwave.pyx":1408
 * @see getNumGroups, getAssociations, getMaxAssociations, addAssociation
 *         '''
 *         self.manager.AddAssociation(homeid, nodeid, groupidx, targetnodeid)             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_targetnodeid); if (unlikely((__pyx_t_4 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->AddAssociation(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.removeAssociation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1415
 * # For notification of changes to the Z-Wave network or device values and associations.
 * #
 *     def addWatcher(self, pythonfunc):             # <<<<<<<<<<<<<<
 *         '''
 * Add a notification watcher.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_52addWatcher(PyObject *__pyx_v_self, PyObject *__pyx_v_pythonfunc); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_52addWatcher[] = "\nAdd a notification watcher.\n\nIn OpenZWave, all feedback from the Z-Wave network is sent to the application\nvia callbacks.  This method allows the application to add a notification\ncallback handler, known as a \"watcher\" to OpenZWave.  An application needs only\nadd a single watcher - all notifications will be reported to it.\n\n@param watcher pointer to a function that will be called by the notification\nsystem.\n@see removeWatcher, notification\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_52addWatcher(PyObject *__pyx_v_self, PyObject *__pyx_v_pythonfunc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addWatcher");

  /* "openzwave.pyx":1428
 * @see removeWatcher, notification
 *         '''
 *         self._watcherCallback = pythonfunc # need to keep a reference to this             # <<<<<<<<<<<<<<
 *         if not self.manager.AddWatcher(callback, <void*>pythonfunc):
 *             raise ValueError("call to AddWatcher failed")
 */
  __Pyx_INCREF(__pyx_v_pythonfunc);
  __Pyx_GIVEREF(__pyx_v_pythonfunc);
  __Pyx_GOTREF(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->_watcherCallback);
  __Pyx_DECREF(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->_watcherCallback);
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->_watcherCallback = __pyx_v_pythonfunc;

  /* "openzwave.pyx":1429
 *         '''
 *         self._watcherCallback = pythonfunc # need to keep a reference to this
 *         if not self.manager.AddWatcher(callback, <void*>pythonfunc):             # <<<<<<<<<<<<<<
 *             raise ValueError("call to AddWatcher failed")
 * #
 */
  __pyx_t_1 = (!((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->AddWatcher(__pyx_f_9openzwave_callback, ((void *)__pyx_v_pythonfunc)));
  if (__pyx_t_1) {

    /* "openzwave.pyx":1430
 *         self._watcherCallback = pythonfunc # need to keep a reference to this
 *         if not self.manager.AddWatcher(callback, <void*>pythonfunc):
 *             raise ValueError("call to AddWatcher failed")             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openzwave.PyManager.addWatcher", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1437
 * # Commands for Z-Wave network management using the PC Controller.
 * #
 *     def resetController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Hard Reset a PC Z-Wave Controller.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_53resetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_53resetController[] = "\nHard Reset a PC Z-Wave Controller.\n\nResets a controller and erases its network configuration settings.  The\ncontroller becomes a primary controller ready to add devices to a new network.\n\n@param homeId The Home ID of the Z-Wave controller to be reset.\n@see softResetController\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_53resetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("resetController");

  /* "openzwave.pyx":1447
 * @see softResetController
 *         '''
 *         self.manager.ResetController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def softResetController(self, homeid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->ResetController(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.resetController", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1449
 *         self.manager.ResetController(homeid)
 * 
 *     def softResetController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Soft Reset a PC Z-Wave Controller.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_54softResetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_54softResetController[] = "\nSoft Reset a PC Z-Wave Controller.\n\nResets a controller without erasing its network configuration settings.\n\n@param homeId The Home ID of the Z-Wave controller to be reset.\n@see resetController\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_54softResetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("softResetController");

  /* "openzwave.pyx":1458
 * @see resetController
 *         '''
 *         self.manager.SoftReset(homeid)             # <<<<<<<<<<<<<<
 * 
 * #        #bint BeginControllerCommand(uint32 homeid, Driver::ControllerCommand _command, Driver::pfnControllerCallback_t _callback = NULL, void* _context = NULL, bool _highPower = false, uint8 _nodeId = 0xff )
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->SoftReset(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openzwave.PyManager.softResetController", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openzwave.pyx":1462
 * #        #bint BeginControllerCommand(uint32 homeid, Driver::ControllerCommand _command, Driver::pfnControllerCallback_t _callback = NULL, void* _context = NULL, bool _highPower = false, uint8 _nodeId = 0xff )
 * 
 *     def cancelControllerCommand(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Cancels any in-progress command running on a controller.
 */

static PyObject *__pyx_pf_9openzwave_9PyManager_55cancelControllerCommand(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_9openzwave_9PyManager_55cancelControllerCommand[] = "\nCancels any in-progress command running on a controller.\n\n@param homeId The Home ID of the Z-Wave controller.\n@return True if a command was running and was cancelled.\n@see beginControllerCommand\n        ";
static PyObject *__pyx_pf_9openzwave_9PyManager_55cancelControllerCommand(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9openzwave_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cancelControllerCommand");

  /* "openzwave.pyx":1470
 * @see beginControllerCommand
 *         '''
 *         return self.manager.CancelControllerCommand(homeid)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_9openzwave_PyManager *)__pyx_v_self)->manager->CancelControllerCommand(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openzwave.PyManager.cancelControllerCommand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_9openzwave_PyOptions(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_9openzwave_PyOptions(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9openzwave_PyOptions[] = {
  {__Pyx_NAMESTR("create"), (PyCFunction)__pyx_pf_9openzwave_9PyOptions_create, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("lock"), (PyCFunction)__pyx_pf_9openzwave_9PyOptions_1lock, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyOptions = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyOptions = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyOptions = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyOptions = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9openzwave_PyOptions = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("openzwave.PyOptions"), /*tp_name*/
  sizeof(struct __pyx_obj_9openzwave_PyOptions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9openzwave_PyOptions, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyOptions, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyOptions, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyOptions, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyOptions, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9openzwave_PyOptions, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9openzwave_PyOptions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_9openzwave_PyManager(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9openzwave_PyManager *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9openzwave_PyManager *)o);
  p->_watcherCallback = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9openzwave_PyManager(PyObject *o) {
  struct __pyx_obj_9openzwave_PyManager *p = (struct __pyx_obj_9openzwave_PyManager *)o;
  Py_XDECREF(p->_watcherCallback);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9openzwave_PyManager(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9openzwave_PyManager *p = (struct __pyx_obj_9openzwave_PyManager *)o;
  if (p->_watcherCallback) {
    e = (*v)(p->_watcherCallback, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9openzwave_PyManager(PyObject *o) {
  struct __pyx_obj_9openzwave_PyManager *p = (struct __pyx_obj_9openzwave_PyManager *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_watcherCallback);
  p->_watcherCallback = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9openzwave_PyManager[] = {
  {__Pyx_NAMESTR("create"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_create, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_create)},
  {__Pyx_NAMESTR("writeConfig"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_1writeConfig, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_1writeConfig)},
  {__Pyx_NAMESTR("addDriver"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_2addDriver, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_2addDriver)},
  {__Pyx_NAMESTR("removeDriver"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_3removeDriver, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_3removeDriver)},
  {__Pyx_NAMESTR("getControllerNodeId"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_4getControllerNodeId, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_4getControllerNodeId)},
  {__Pyx_NAMESTR("isPrimaryController"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_5isPrimaryController, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_5isPrimaryController)},
  {__Pyx_NAMESTR("isStaticUpdateController"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_6isStaticUpdateController, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_6isStaticUpdateController)},
  {__Pyx_NAMESTR("isBridgeController"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_7isBridgeController, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_7isBridgeController)},
  {__Pyx_NAMESTR("getLibraryVersion"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_8getLibraryVersion, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_8getLibraryVersion)},
  {__Pyx_NAMESTR("getLibraryTypeName"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_9getLibraryTypeName, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_9getLibraryTypeName)},
  {__Pyx_NAMESTR("getPollInterval"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_10getPollInterval, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_10getPollInterval)},
  {__Pyx_NAMESTR("setPollInterval"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_11setPollInterval, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_11setPollInterval)},
  {__Pyx_NAMESTR("refreshNodeInfo"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_12refreshNodeInfo, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_12refreshNodeInfo)},
  {__Pyx_NAMESTR("requestNodeState"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_13requestNodeState, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_13requestNodeState)},
  {__Pyx_NAMESTR("isNodeListeningDevice"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_14isNodeListeningDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_14isNodeListeningDevice)},
  {__Pyx_NAMESTR("isNodeRoutingDevice"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_15isNodeRoutingDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_15isNodeRoutingDevice)},
  {__Pyx_NAMESTR("getNodeMaxBaudRate"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_16getNodeMaxBaudRate, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_16getNodeMaxBaudRate)},
  {__Pyx_NAMESTR("getNodeVersion"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_17getNodeVersion, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_17getNodeVersion)},
  {__Pyx_NAMESTR("getNodeSecurity"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_18getNodeSecurity, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_18getNodeSecurity)},
  {__Pyx_NAMESTR("getNodeBasic"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_19getNodeBasic, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_19getNodeBasic)},
  {__Pyx_NAMESTR("getNodeGeneric"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_20getNodeGeneric, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_20getNodeGeneric)},
  {__Pyx_NAMESTR("getNodeSpecific"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_21getNodeSpecific, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_21getNodeSpecific)},
  {__Pyx_NAMESTR("getNodeType"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_22getNodeType, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_22getNodeType)},
  {__Pyx_NAMESTR("getNodeNeighbors"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_23getNodeNeighbors, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_23getNodeNeighbors)},
  {__Pyx_NAMESTR("getNodeManufacturerName"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_24getNodeManufacturerName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_24getNodeManufacturerName)},
  {__Pyx_NAMESTR("getNodeProductName"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_25getNodeProductName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_25getNodeProductName)},
  {__Pyx_NAMESTR("getNodeName"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_26getNodeName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_26getNodeName)},
  {__Pyx_NAMESTR("getNodeLocation"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_27getNodeLocation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_27getNodeLocation)},
  {__Pyx_NAMESTR("getNodeManufacturerId"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_28getNodeManufacturerId, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_28getNodeManufacturerId)},
  {__Pyx_NAMESTR("getNodeProductType"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_29getNodeProductType, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_29getNodeProductType)},
  {__Pyx_NAMESTR("getNodeProductId"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_30getNodeProductId, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_30getNodeProductId)},
  {__Pyx_NAMESTR("setNodeManufacturerName"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_31setNodeManufacturerName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_31setNodeManufacturerName)},
  {__Pyx_NAMESTR("setNodeProductName"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_32setNodeProductName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_32setNodeProductName)},
  {__Pyx_NAMESTR("setNodeName"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_33setNodeName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_33setNodeName)},
  {__Pyx_NAMESTR("setNodeLocation"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_34setNodeLocation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_34setNodeLocation)},
  {__Pyx_NAMESTR("setNodeOn"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_35setNodeOn, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_35setNodeOn)},
  {__Pyx_NAMESTR("setNodeOff"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_36setNodeOff, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_36setNodeOff)},
  {__Pyx_NAMESTR("setNodeLevel"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_37setNodeLevel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_37setNodeLevel)},
  {__Pyx_NAMESTR("isNodeInfoReceived"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_38isNodeInfoReceived, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_38isNodeInfoReceived)},
  {__Pyx_NAMESTR("getNodeClassInformation"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_39getNodeClassInformation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_39getNodeClassInformation)},
  {__Pyx_NAMESTR("setValue"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_40setValue, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_40setValue)},
  {__Pyx_NAMESTR("switchAllOn"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_41switchAllOn, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_41switchAllOn)},
  {__Pyx_NAMESTR("switchAllOff"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_42switchAllOff, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_42switchAllOff)},
  {__Pyx_NAMESTR("setConfigParam"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_43setConfigParam, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_43setConfigParam)},
  {__Pyx_NAMESTR("requestConfigParam"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_44requestConfigParam, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_44requestConfigParam)},
  {__Pyx_NAMESTR("requestAllConfigParams"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_45requestAllConfigParams, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_45requestAllConfigParams)},
  {__Pyx_NAMESTR("getNumGroups"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_46getNumGroups, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_46getNumGroups)},
  {__Pyx_NAMESTR("getAssociations"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_47getAssociations, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_47getAssociations)},
  {__Pyx_NAMESTR("getMaxAssociations"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_48getMaxAssociations, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_48getMaxAssociations)},
  {__Pyx_NAMESTR("getGroupLabel"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_49getGroupLabel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_49getGroupLabel)},
  {__Pyx_NAMESTR("addAssociation"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_50addAssociation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_50addAssociation)},
  {__Pyx_NAMESTR("removeAssociation"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_51removeAssociation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_51removeAssociation)},
  {__Pyx_NAMESTR("addWatcher"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_52addWatcher, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_52addWatcher)},
  {__Pyx_NAMESTR("resetController"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_53resetController, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_53resetController)},
  {__Pyx_NAMESTR("softResetController"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_54softResetController, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_54softResetController)},
  {__Pyx_NAMESTR("cancelControllerCommand"), (PyCFunction)__pyx_pf_9openzwave_9PyManager_55cancelControllerCommand, METH_O, __Pyx_DOCSTR(__pyx_doc_9openzwave_9PyManager_55cancelControllerCommand)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyManager = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyManager = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyManager = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyManager = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9openzwave_PyManager = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("openzwave.PyManager"), /*tp_name*/
  sizeof(struct __pyx_obj_9openzwave_PyManager), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9openzwave_PyManager, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyManager, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyManager, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyManager, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyManager, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\nThe main public interface to OpenZWave.\n\nA singleton class providing the main public interface to OpenZWave.  The\nManager class exposes all the functionality required to add Z-Wave support to\nan application.  It handles the sending and receiving of Z-Wave messages as\nwell as the configuration of a Z-Wave network and its devices, freeing the\nlibrary user from the burden of learning the low-level details of the Z-Wave\nprotocol.\n\nAll Z-Wave functionality is accessed via the Manager class.  While this does\nnot make for the most efficient code structure, it does enable the library to\nhandle potentially complex and hard-to-debug issues such as multi-threading and\nobject lifespans behind the scenes. Application development is therefore\nsimplified and less prone to bugs.\n\nThere can be only one instance of the Manager class, and all applications will\nstart by calling Manager::Create static method to create that instance.  From\nthen on, a call to the Manager::Get static method will return the pointer to\nthe Manager object.  On application exit, Manager::Destroy should be called to\nallow OpenZWave to clean up and delete any other objects it has created.\n\nOnce the Manager has been created, a call should be made to Manager::AddWatcher\nto install a notification callback handler.  This handler will receive\nnotifications of Z-Wave network changes and updates to device values, and is an\nessential element of OpenZWave.\n\nNext, a call should be made to Manager::AddDriver for each Z-Wave controller\nattached to the PC.  Each Driver will handle the sending and receiving of\nmessages for all the devices in its controller's Z-Wave network.  The Driver\nwill read any previously saved configuration and then query the Z-Wave\ncontroller for any missing information.  Once that process is complete, a\nDriverReady notification callback will be sent containing the Home ID of the\ncontroller, which is required by most of the other Manager class methods.\n\n[After the DriverReady notification is sent, the Driver will poll each node on\nthe network to update information about each node.  After all \"awake\" nodes\nhave been polled, an \"AllAwakeNodesQueried\" notification is sent.  This is when\na client application can expect all of the node information (both static\ninformation, like the physical device's capabilities, session information (like\n[associations and/or names] and dynamic information (like temperature or on/off\nstate) to be available.  Finally, after all nodes (whether listening or\nsleeping) have been polled, an \"AllNodesQueried\" notification is sent.]\n    "), /*tp_doc*/
  __pyx_tp_traverse_9openzwave_PyManager, /*tp_traverse*/
  __pyx_tp_clear_9openzwave_PyManager, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9openzwave_PyManager, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9openzwave_PyManager, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("openzwave"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 0},
  {&__pyx_n_s_100, __pyx_k_100, sizeof(__pyx_k_100), 0, 0, 1, 1},
  {&__pyx_n_s_101, __pyx_k_101, sizeof(__pyx_k_101), 0, 0, 1, 1},
  {&__pyx_n_s_102, __pyx_k_102, sizeof(__pyx_k_102), 0, 0, 1, 1},
  {&__pyx_n_s_103, __pyx_k_103, sizeof(__pyx_k_103), 0, 0, 1, 1},
  {&__pyx_n_s_104, __pyx_k_104, sizeof(__pyx_k_104), 0, 0, 1, 1},
  {&__pyx_n_s_105, __pyx_k_105, sizeof(__pyx_k_105), 0, 0, 1, 1},
  {&__pyx_n_s_106, __pyx_k_106, sizeof(__pyx_k_106), 0, 0, 1, 1},
  {&__pyx_n_s_107, __pyx_k_107, sizeof(__pyx_k_107), 0, 0, 1, 1},
  {&__pyx_n_s_108, __pyx_k_108, sizeof(__pyx_k_108), 0, 0, 1, 1},
  {&__pyx_n_s_109, __pyx_k_109, sizeof(__pyx_k_109), 0, 0, 1, 1},
  {&__pyx_n_s_110, __pyx_k_110, sizeof(__pyx_k_110), 0, 0, 1, 1},
  {&__pyx_n_s_111, __pyx_k_111, sizeof(__pyx_k_111), 0, 0, 1, 1},
  {&__pyx_n_s_112, __pyx_k_112, sizeof(__pyx_k_112), 0, 0, 1, 1},
  {&__pyx_n_s_113, __pyx_k_113, sizeof(__pyx_k_113), 0, 0, 1, 1},
  {&__pyx_n_s_114, __pyx_k_114, sizeof(__pyx_k_114), 0, 0, 1, 1},
  {&__pyx_n_s_115, __pyx_k_115, sizeof(__pyx_k_115), 0, 0, 1, 1},
  {&__pyx_n_s_116, __pyx_k_116, sizeof(__pyx_k_116), 0, 0, 1, 1},
  {&__pyx_n_s_117, __pyx_k_117, sizeof(__pyx_k_117), 0, 0, 1, 1},
  {&__pyx_n_s_118, __pyx_k_118, sizeof(__pyx_k_118), 0, 0, 1, 1},
  {&__pyx_n_s_119, __pyx_k_119, sizeof(__pyx_k_119), 0, 0, 1, 1},
  {&__pyx_n_s_120, __pyx_k_120, sizeof(__pyx_k_120), 0, 0, 1, 1},
  {&__pyx_n_s_121, __pyx_k_121, sizeof(__pyx_k_121), 0, 0, 1, 1},
  {&__pyx_n_s_122, __pyx_k_122, sizeof(__pyx_k_122), 0, 0, 1, 1},
  {&__pyx_n_s_123, __pyx_k_123, sizeof(__pyx_k_123), 0, 0, 1, 1},
  {&__pyx_n_s_124, __pyx_k_124, sizeof(__pyx_k_124), 0, 0, 1, 1},
  {&__pyx_n_s_125, __pyx_k_125, sizeof(__pyx_k_125), 0, 0, 1, 1},
  {&__pyx_n_s_126, __pyx_k_126, sizeof(__pyx_k_126), 0, 0, 1, 1},
  {&__pyx_n_s_127, __pyx_k_127, sizeof(__pyx_k_127), 0, 0, 1, 1},
  {&__pyx_n_s_128, __pyx_k_128, sizeof(__pyx_k_128), 0, 0, 1, 1},
  {&__pyx_n_s_129, __pyx_k_129, sizeof(__pyx_k_129), 0, 0, 1, 1},
  {&__pyx_kp_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 0},
  {&__pyx_n_s_130, __pyx_k_130, sizeof(__pyx_k_130), 0, 0, 1, 1},
  {&__pyx_n_s_131, __pyx_k_131, sizeof(__pyx_k_131), 0, 0, 1, 1},
  {&__pyx_n_s_132, __pyx_k_132, sizeof(__pyx_k_132), 0, 0, 1, 1},
  {&__pyx_n_s_133, __pyx_k_133, sizeof(__pyx_k_133), 0, 0, 1, 1},
  {&__pyx_n_s_134, __pyx_k_134, sizeof(__pyx_k_134), 0, 0, 1, 1},
  {&__pyx_n_s_135, __pyx_k_135, sizeof(__pyx_k_135), 0, 0, 1, 1},
  {&__pyx_n_s_136, __pyx_k_136, sizeof(__pyx_k_136), 0, 0, 1, 1},
  {&__pyx_n_s_137, __pyx_k_137, sizeof(__pyx_k_137), 0, 0, 1, 1},
  {&__pyx_n_s_138, __pyx_k_138, sizeof(__pyx_k_138), 0, 0, 1, 1},
  {&__pyx_n_s_139, __pyx_k_139, sizeof(__pyx_k_139), 0, 0, 1, 1},
  {&__pyx_n_s_140, __pyx_k_140, sizeof(__pyx_k_140), 0, 0, 1, 1},
  {&__pyx_n_s_141, __pyx_k_141, sizeof(__pyx_k_141), 0, 0, 1, 1},
  {&__pyx_n_s_142, __pyx_k_142, sizeof(__pyx_k_142), 0, 0, 1, 1},
  {&__pyx_n_s_143, __pyx_k_143, sizeof(__pyx_k_143), 0, 0, 1, 1},
  {&__pyx_n_s_144, __pyx_k_144, sizeof(__pyx_k_144), 0, 0, 1, 1},
  {&__pyx_n_s_145, __pyx_k_145, sizeof(__pyx_k_145), 0, 0, 1, 1},
  {&__pyx_n_s_146, __pyx_k_146, sizeof(__pyx_k_146), 0, 0, 1, 1},
  {&__pyx_n_s_147, __pyx_k_147, sizeof(__pyx_k_147), 0, 0, 1, 1},
  {&__pyx_n_s_148, __pyx_k_148, sizeof(__pyx_k_148), 0, 0, 1, 1},
  {&__pyx_n_s_149, __pyx_k_149, sizeof(__pyx_k_149), 0, 0, 1, 1},
  {&__pyx_n_s_150, __pyx_k_150, sizeof(__pyx_k_150), 0, 0, 1, 1},
  {&__pyx_n_s_151, __pyx_k_151, sizeof(__pyx_k_151), 0, 0, 1, 1},
  {&__pyx_n_s_152, __pyx_k_152, sizeof(__pyx_k_152), 0, 0, 1, 1},
  {&__pyx_n_s_153, __pyx_k_153, sizeof(__pyx_k_153), 0, 0, 1, 1},
  {&__pyx_n_s_154, __pyx_k_154, sizeof(__pyx_k_154), 0, 0, 1, 1},
  {&__pyx_n_s_155, __pyx_k_155, sizeof(__pyx_k_155), 0, 0, 1, 1},
  {&__pyx_n_s_156, __pyx_k_156, sizeof(__pyx_k_156), 0, 0, 1, 1},
  {&__pyx_n_s_157, __pyx_k_157, sizeof(__pyx_k_157), 0, 0, 1, 1},
  {&__pyx_n_s_158, __pyx_k_158, sizeof(__pyx_k_158), 0, 0, 1, 1},
  {&__pyx_n_s_159, __pyx_k_159, sizeof(__pyx_k_159), 0, 0, 1, 1},
  {&__pyx_kp_s_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 0, 1, 0},
  {&__pyx_n_s_160, __pyx_k_160, sizeof(__pyx_k_160), 0, 0, 1, 1},
  {&__pyx_n_s_161, __pyx_k_161, sizeof(__pyx_k_161), 0, 0, 1, 1},
  {&__pyx_n_s_162, __pyx_k_162, sizeof(__pyx_k_162), 0, 0, 1, 1},
  {&__pyx_n_s_163, __pyx_k_163, sizeof(__pyx_k_163), 0, 0, 1, 1},
  {&__pyx_n_s_164, __pyx_k_164, sizeof(__pyx_k_164), 0, 0, 1, 1},
  {&__pyx_n_s_165, __pyx_k_165, sizeof(__pyx_k_165), 0, 0, 1, 1},
  {&__pyx_n_s_166, __pyx_k_166, sizeof(__pyx_k_166), 0, 0, 1, 1},
  {&__pyx_n_s_167, __pyx_k_167, sizeof(__pyx_k_167), 0, 0, 1, 1},
  {&__pyx_n_s_168, __pyx_k_168, sizeof(__pyx_k_168), 0, 0, 1, 1},
  {&__pyx_n_s_169, __pyx_k_169, sizeof(__pyx_k_169), 0, 0, 1, 1},
  {&__pyx_n_s_170, __pyx_k_170, sizeof(__pyx_k_170), 0, 0, 1, 1},
  {&__pyx_n_s_171, __pyx_k_171, sizeof(__pyx_k_171), 0, 0, 1, 1},
  {&__pyx_kp_s_172, __pyx_k_172, sizeof(__pyx_k_172), 0, 0, 1, 0},
  {&__pyx_kp_s_173, __pyx_k_173, sizeof(__pyx_k_173), 0, 0, 1, 0},
  {&__pyx_kp_s_174, __pyx_k_174, sizeof(__pyx_k_174), 0, 0, 1, 0},
  {&__pyx_kp_s_175, __pyx_k_175, sizeof(__pyx_k_175), 0, 0, 1, 0},
  {&__pyx_kp_s_176, __pyx_k_176, sizeof(__pyx_k_176), 0, 0, 1, 0},
  {&__pyx_kp_s_177, __pyx_k_177, sizeof(__pyx_k_177), 0, 0, 1, 0},
  {&__pyx_kp_s_178, __pyx_k_178, sizeof(__pyx_k_178), 0, 0, 1, 0},
  {&__pyx_kp_s_179, __pyx_k_179, sizeof(__pyx_k_179), 0, 0, 1, 0},
  {&__pyx_kp_s_180, __pyx_k_180, sizeof(__pyx_k_180), 0, 0, 1, 0},
  {&__pyx_kp_s_181, __pyx_k_181, sizeof(__pyx_k_181), 0, 0, 1, 0},
  {&__pyx_kp_s_182, __pyx_k_182, sizeof(__pyx_k_182), 0, 0, 1, 0},
  {&__pyx_kp_s_183, __pyx_k_183, sizeof(__pyx_k_183), 0, 0, 1, 0},
  {&__pyx_kp_s_184, __pyx_k_184, sizeof(__pyx_k_184), 0, 0, 1, 0},
  {&__pyx_kp_s_185, __pyx_k_185, sizeof(__pyx_k_185), 0, 0, 1, 0},
  {&__pyx_kp_s_186, __pyx_k_186, sizeof(__pyx_k_186), 0, 0, 1, 0},
  {&__pyx_kp_s_187, __pyx_k_187, sizeof(__pyx_k_187), 0, 0, 1, 0},
  {&__pyx_kp_s_188, __pyx_k_188, sizeof(__pyx_k_188), 0, 0, 1, 0},
  {&__pyx_kp_s_189, __pyx_k_189, sizeof(__pyx_k_189), 0, 0, 1, 0},
  {&__pyx_kp_s_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 1, 0},
  {&__pyx_kp_s_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 0, 1, 0},
  {&__pyx_kp_s_25, __pyx_k_25, sizeof(__pyx_k_25), 0, 0, 1, 0},
  {&__pyx_kp_s_28, __pyx_k_28, sizeof(__pyx_k_28), 0, 0, 1, 0},
  {&__pyx_kp_s_31, __pyx_k_31, sizeof(__pyx_k_31), 0, 0, 1, 0},
  {&__pyx_kp_s_34, __pyx_k_34, sizeof(__pyx_k_34), 0, 0, 1, 0},
  {&__pyx_kp_s_37, __pyx_k_37, sizeof(__pyx_k_37), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_s_40, __pyx_k_40, sizeof(__pyx_k_40), 0, 0, 1, 0},
  {&__pyx_kp_s_43, __pyx_k_43, sizeof(__pyx_k_43), 0, 0, 1, 0},
  {&__pyx_kp_s_46, __pyx_k_46, sizeof(__pyx_k_46), 0, 0, 1, 0},
  {&__pyx_kp_s_49, __pyx_k_49, sizeof(__pyx_k_49), 0, 0, 1, 0},
  {&__pyx_kp_s_52, __pyx_k_52, sizeof(__pyx_k_52), 0, 0, 1, 0},
  {&__pyx_kp_s_55, __pyx_k_55, sizeof(__pyx_k_55), 0, 0, 1, 0},
  {&__pyx_kp_s_58, __pyx_k_58, sizeof(__pyx_k_58), 0, 0, 1, 0},
  {&__pyx_kp_s_61, __pyx_k_61, sizeof(__pyx_k_61), 0, 0, 1, 0},
  {&__pyx_kp_s_64, __pyx_k_64, sizeof(__pyx_k_64), 0, 0, 1, 0},
  {&__pyx_kp_s_67, __pyx_k_67, sizeof(__pyx_k_67), 0, 0, 1, 0},
  {&__pyx_kp_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 0},
  {&__pyx_kp_s_70, __pyx_k_70, sizeof(__pyx_k_70), 0, 0, 1, 0},
  {&__pyx_kp_s_73, __pyx_k_73, sizeof(__pyx_k_73), 0, 0, 1, 0},
  {&__pyx_kp_s_76, __pyx_k_76, sizeof(__pyx_k_76), 0, 0, 1, 0},
  {&__pyx_kp_s_79, __pyx_k_79, sizeof(__pyx_k_79), 0, 0, 1, 0},
  {&__pyx_kp_s_82, __pyx_k_82, sizeof(__pyx_k_82), 0, 0, 1, 0},
  {&__pyx_kp_s_85, __pyx_k_85, sizeof(__pyx_k_85), 0, 0, 1, 0},
  {&__pyx_kp_s_88, __pyx_k_88, sizeof(__pyx_k_88), 0, 0, 1, 0},
  {&__pyx_kp_s_91, __pyx_k_91, sizeof(__pyx_k_91), 0, 0, 1, 0},
  {&__pyx_kp_s_94, __pyx_k_94, sizeof(__pyx_k_94), 0, 0, 1, 0},
  {&__pyx_n_s_96, __pyx_k_96, sizeof(__pyx_k_96), 0, 0, 1, 1},
  {&__pyx_n_s_97, __pyx_k_97, sizeof(__pyx_k_97), 0, 0, 1, 1},
  {&__pyx_n_s_98, __pyx_k_98, sizeof(__pyx_k_98), 0, 0, 1, 1},
  {&__pyx_n_s_99, __pyx_k_99, sizeof(__pyx_k_99), 0, 0, 1, 1},
  {&__pyx_n_s__AllNodesQueried, __pyx_k__AllNodesQueried, sizeof(__pyx_k__AllNodesQueried), 0, 0, 1, 1},
  {&__pyx_n_s__AwakeNodesQueried, __pyx_k__AwakeNodesQueried, sizeof(__pyx_k__AwakeNodesQueried), 0, 0, 1, 1},
  {&__pyx_n_s__Basic, __pyx_k__Basic, sizeof(__pyx_k__Basic), 0, 0, 1, 1},
  {&__pyx_n_s__Bool, __pyx_k__Bool, sizeof(__pyx_k__Bool), 0, 0, 1, 1},
  {&__pyx_n_s__Button, __pyx_k__Button, sizeof(__pyx_k__Button), 0, 0, 1, 1},
  {&__pyx_n_s__Byte, __pyx_k__Byte, sizeof(__pyx_k__Byte), 0, 0, 1, 1},
  {&__pyx_n_s__CALLBACK_DESC, __pyx_k__CALLBACK_DESC, sizeof(__pyx_k__CALLBACK_DESC), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_ALARM, __pyx_k__COMMAND_CLASS_ALARM, sizeof(__pyx_k__COMMAND_CLASS_ALARM), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_BASIC, __pyx_k__COMMAND_CLASS_BASIC, sizeof(__pyx_k__COMMAND_CLASS_BASIC), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_CLOCK, __pyx_k__COMMAND_CLASS_CLOCK, sizeof(__pyx_k__COMMAND_CLASS_CLOCK), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_DESC, __pyx_k__COMMAND_CLASS_DESC, sizeof(__pyx_k__COMMAND_CLASS_DESC), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_HAIL, __pyx_k__COMMAND_CLASS_HAIL, sizeof(__pyx_k__COMMAND_CLASS_HAIL), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_LOCK, __pyx_k__COMMAND_CLASS_LOCK, sizeof(__pyx_k__COMMAND_CLASS_LOCK), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_MARK, __pyx_k__COMMAND_CLASS_MARK, sizeof(__pyx_k__COMMAND_CLASS_MARK), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_METER, __pyx_k__COMMAND_CLASS_METER, sizeof(__pyx_k__COMMAND_CLASS_METER), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_TIME, __pyx_k__COMMAND_CLASS_TIME, sizeof(__pyx_k__COMMAND_CLASS_TIME), 0, 0, 1, 1},
  {&__pyx_n_s__Config, __pyx_k__Config, sizeof(__pyx_k__Config), 0, 0, 1, 1},
  {&__pyx_n_s__Decimal, __pyx_k__Decimal, sizeof(__pyx_k__Decimal), 0, 0, 1, 1},
  {&__pyx_n_s__DriverReady, __pyx_k__DriverReady, sizeof(__pyx_k__DriverReady), 0, 0, 1, 1},
  {&__pyx_n_s__DriverReset, __pyx_k__DriverReset, sizeof(__pyx_k__DriverReset), 0, 0, 1, 1},
  {&__pyx_n_s__EnumWithDoc, __pyx_k__EnumWithDoc, sizeof(__pyx_k__EnumWithDoc), 0, 0, 1, 1},
  {&__pyx_n_s__Group, __pyx_k__Group, sizeof(__pyx_k__Group), 0, 0, 1, 1},
  {&__pyx_n_s__Int, __pyx_k__Int, sizeof(__pyx_k__Int), 0, 0, 1, 1},
  {&__pyx_n_s__List, __pyx_k__List, sizeof(__pyx_k__List), 0, 0, 1, 1},
  {&__pyx_n_s__MsgComplete, __pyx_k__MsgComplete, sizeof(__pyx_k__MsgComplete), 0, 0, 1, 1},
  {&__pyx_n_s__NodeAdded, __pyx_k__NodeAdded, sizeof(__pyx_k__NodeAdded), 0, 0, 1, 1},
  {&__pyx_n_s__NodeEvent, __pyx_k__NodeEvent, sizeof(__pyx_k__NodeEvent), 0, 0, 1, 1},
  {&__pyx_n_s__NodeNaming, __pyx_k__NodeNaming, sizeof(__pyx_k__NodeNaming), 0, 0, 1, 1},
  {&__pyx_n_s__NodeNew, __pyx_k__NodeNew, sizeof(__pyx_k__NodeNew), 0, 0, 1, 1},
  {&__pyx_n_s__NodeProtocolInfo, __pyx_k__NodeProtocolInfo, sizeof(__pyx_k__NodeProtocolInfo), 0, 0, 1, 1},
  {&__pyx_n_s__NodeQueriesComplete, __pyx_k__NodeQueriesComplete, sizeof(__pyx_k__NodeQueriesComplete), 0, 0, 1, 1},
  {&__pyx_n_s__NodeRemoved, __pyx_k__NodeRemoved, sizeof(__pyx_k__NodeRemoved), 0, 0, 1, 1},
  {&__pyx_n_s__PollingDisabled, __pyx_k__PollingDisabled, sizeof(__pyx_k__PollingDisabled), 0, 0, 1, 1},
  {&__pyx_n_s__PollingEnabled, __pyx_k__PollingEnabled, sizeof(__pyx_k__PollingEnabled), 0, 0, 1, 1},
  {&__pyx_n_s__PyGenres, __pyx_k__PyGenres, sizeof(__pyx_k__PyGenres), 0, 0, 1, 1},
  {&__pyx_n_s__PyNotifications, __pyx_k__PyNotifications, sizeof(__pyx_k__PyNotifications), 0, 0, 1, 1},
  {&__pyx_n_s__PyValueTypes, __pyx_k__PyValueTypes, sizeof(__pyx_k__PyValueTypes), 0, 0, 1, 1},
  {&__pyx_n_s__Schedule, __pyx_k__Schedule, sizeof(__pyx_k__Schedule), 0, 0, 1, 1},
  {&__pyx_n_s__Short, __pyx_k__Short, sizeof(__pyx_k__Short), 0, 0, 1, 1},
  {&__pyx_n_s__String, __pyx_k__String, sizeof(__pyx_k__String), 0, 0, 1, 1},
  {&__pyx_n_s__System, __pyx_k__System, sizeof(__pyx_k__System), 0, 0, 1, 1},
  {&__pyx_n_s__User, __pyx_k__User, sizeof(__pyx_k__User), 0, 0, 1, 1},
  {&__pyx_n_s__ValueAdded, __pyx_k__ValueAdded, sizeof(__pyx_k__ValueAdded), 0, 0, 1, 1},
  {&__pyx_n_s__ValueChanged, __pyx_k__ValueChanged, sizeof(__pyx_k__ValueChanged), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s__ValueRemoved, __pyx_k__ValueRemoved, sizeof(__pyx_k__ValueRemoved), 0, 0, 1, 1},
  {&__pyx_n_s____doc__, __pyx_k____doc__, sizeof(__pyx_k____doc__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__a, __pyx_k__a, sizeof(__pyx_k__a), 0, 0, 1, 1},
  {&__pyx_n_s__b, __pyx_k__b, sizeof(__pyx_k__b), 0, 0, 1, 1},
  {&__pyx_n_s__c, __pyx_k__c, sizeof(__pyx_k__c), 0, 0, 1, 1},
  {&__pyx_n_s__className, __pyx_k__className, sizeof(__pyx_k__className), 0, 0, 1, 1},
  {&__pyx_n_s__classVersion, __pyx_k__classVersion, sizeof(__pyx_k__classVersion), 0, 0, 1, 1},
  {&__pyx_n_s__commandClass, __pyx_k__commandClass, sizeof(__pyx_k__commandClass), 0, 0, 1, 1},
  {&__pyx_n_s__commandClassId, __pyx_k__commandClassId, sizeof(__pyx_k__commandClassId), 0, 0, 1, 1},
  {&__pyx_n_s__doc, __pyx_k__doc, sizeof(__pyx_k__doc), 0, 0, 1, 1},
  {&__pyx_n_s__event, __pyx_k__event, sizeof(__pyx_k__event), 0, 0, 1, 1},
  {&__pyx_n_s__genre, __pyx_k__genre, sizeof(__pyx_k__genre), 0, 0, 1, 1},
  {&__pyx_n_s__groupIdx, __pyx_k__groupIdx, sizeof(__pyx_k__groupIdx), 0, 0, 1, 1},
  {&__pyx_n_s__groupidx, __pyx_k__groupidx, sizeof(__pyx_k__groupidx), 0, 0, 1, 1},
  {&__pyx_n_s__homeId, __pyx_k__homeId, sizeof(__pyx_k__homeId), 0, 0, 1, 1},
  {&__pyx_n_s__homeid, __pyx_k__homeid, sizeof(__pyx_k__homeid), 0, 0, 1, 1},
  {&__pyx_n_s__id, __pyx_k__id, sizeof(__pyx_k__id), 0, 0, 1, 1},
  {&__pyx_n_s__index, __pyx_k__index, sizeof(__pyx_k__index), 0, 0, 1, 1},
  {&__pyx_n_s__instance, __pyx_k__instance, sizeof(__pyx_k__instance), 0, 0, 1, 1},
  {&__pyx_n_s__label, __pyx_k__label, sizeof(__pyx_k__label), 0, 0, 1, 1},
  {&__pyx_n_s__level, __pyx_k__level, sizeof(__pyx_k__level), 0, 0, 1, 1},
  {&__pyx_n_s__location, __pyx_k__location, sizeof(__pyx_k__location), 0, 0, 1, 1},
  {&__pyx_n_s__manufacturerName, __pyx_k__manufacturerName, sizeof(__pyx_k__manufacturerName), 0, 0, 1, 1},
  {&__pyx_n_s__name, __pyx_k__name, sizeof(__pyx_k__name), 0, 0, 1, 1},
  {&__pyx_n_s__nodeId, __pyx_k__nodeId, sizeof(__pyx_k__nodeId), 0, 0, 1, 1},
  {&__pyx_n_s__nodeid, __pyx_k__nodeid, sizeof(__pyx_k__nodeid), 0, 0, 1, 1},
  {&__pyx_n_s__notificationType, __pyx_k__notificationType, sizeof(__pyx_k__notificationType), 0, 0, 1, 1},
  {&__pyx_n_s__openzwave, __pyx_k__openzwave, sizeof(__pyx_k__openzwave), 0, 0, 1, 1},
  {&__pyx_n_s__param, __pyx_k__param, sizeof(__pyx_k__param), 0, 0, 1, 1},
  {&__pyx_n_s__productName, __pyx_k__productName, sizeof(__pyx_k__productName), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__readOnly, __pyx_k__readOnly, sizeof(__pyx_k__readOnly), 0, 0, 1, 1},
  {&__pyx_n_s__self, __pyx_k__self, sizeof(__pyx_k__self), 0, 0, 1, 1},
  {&__pyx_n_s__setDoc, __pyx_k__setDoc, sizeof(__pyx_k__setDoc), 0, 0, 1, 1},
  {&__pyx_n_s__targetnodeid, __pyx_k__targetnodeid, sizeof(__pyx_k__targetnodeid), 0, 0, 1, 1},
  {&__pyx_n_s__type, __pyx_k__type, sizeof(__pyx_k__type), 0, 0, 1, 1},
  {&__pyx_n_s__units, __pyx_k__units, sizeof(__pyx_k__units), 0, 0, 1, 1},
  {&__pyx_n_s__value, __pyx_k__value, sizeof(__pyx_k__value), 0, 0, 1, 1},
  {&__pyx_n_s__valueId, __pyx_k__valueId, sizeof(__pyx_k__valueId), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "openzwave.pyx":1430
 *         self._watcherCallback = pythonfunc # need to keep a reference to this
 *         if not self.manager.AddWatcher(callback, <void*>pythonfunc):
 *             raise ValueError("call to AddWatcher failed")             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  __pyx_k_tuple_2 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_2));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_2, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));

  /* "openzwave.pyx":225
 * 
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's list. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueRemoved').setDoc(
 *                          "A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),
 */
  __pyx_k_tuple_3 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_3));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ValueAdded));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 0, ((PyObject *)__pyx_n_s__ValueAdded));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ValueAdded));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_3));
  __pyx_k_tuple_5 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_5));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_5, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_5));

  /* "openzwave.pyx":226
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's list. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
 *     EnumWithDoc('ValueRemoved').setDoc(             # <<<<<<<<<<<<<<
 *                          "A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc(
 */
  __pyx_k_tuple_6 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_6));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ValueRemoved));
  PyTuple_SET_ITEM(__pyx_k_tuple_6, 0, ((PyObject *)__pyx_n_s__ValueRemoved));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ValueRemoved));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_6));
  __pyx_k_tuple_8 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_8));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_7));
  PyTuple_SET_ITEM(__pyx_k_tuple_8, 0, ((PyObject *)__pyx_kp_s_7));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_7));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_8));

  /* "openzwave.pyx":228
 *     EnumWithDoc('ValueRemoved').setDoc(
 *                          "A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc(             # <<<<<<<<<<<<<<
 *                          "A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc(
 */
  __pyx_k_tuple_9 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_9));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ValueChanged));
  PyTuple_SET_ITEM(__pyx_k_tuple_9, 0, ((PyObject *)__pyx_n_s__ValueChanged));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ValueChanged));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_9));
  __pyx_k_tuple_11 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_11));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_11, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_11));

  /* "openzwave.pyx":230
 *     EnumWithDoc('ValueChanged').setDoc(
 *                          "A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc(             # <<<<<<<<<<<<<<
 *                          "The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc(
 */
  __pyx_k_tuple_12 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_12));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Group));
  PyTuple_SET_ITEM(__pyx_k_tuple_12, 0, ((PyObject *)__pyx_n_s__Group));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Group));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_12));
  __pyx_k_tuple_14 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_14));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_13));
  PyTuple_SET_ITEM(__pyx_k_tuple_14, 0, ((PyObject *)__pyx_kp_s_13));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_13));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_14));

  /* "openzwave.pyx":232
 *     EnumWithDoc('Group').setDoc(
 *                          "The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc(             # <<<<<<<<<<<<<<
 *                          "A new node has been found (not already stored in zwcfg*.xml file)"),
 *     EnumWithDoc('NodeAdded').setDoc(
 */
  __pyx_k_tuple_15 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_15));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeNew));
  PyTuple_SET_ITEM(__pyx_k_tuple_15, 0, ((PyObject *)__pyx_n_s__NodeNew));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeNew));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_15));
  __pyx_k_tuple_17 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_17));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_16));
  PyTuple_SET_ITEM(__pyx_k_tuple_17, 0, ((PyObject *)__pyx_kp_s_16));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_16));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_17));

  /* "openzwave.pyx":234
 *     EnumWithDoc('NodeNew').setDoc(
 *                          "A new node has been found (not already stored in zwcfg*.xml file)"),
 *     EnumWithDoc('NodeAdded').setDoc(             # <<<<<<<<<<<<<<
 *                          "A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc(
 */
  __pyx_k_tuple_18 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_18));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeAdded));
  PyTuple_SET_ITEM(__pyx_k_tuple_18, 0, ((PyObject *)__pyx_n_s__NodeAdded));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeAdded));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_18));
  __pyx_k_tuple_20 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_20));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_19));
  PyTuple_SET_ITEM(__pyx_k_tuple_20, 0, ((PyObject *)__pyx_kp_s_19));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_19));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_20));

  /* "openzwave.pyx":236
 *     EnumWithDoc('NodeAdded').setDoc(
 *                          "A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc(             # <<<<<<<<<<<<<<
 *                          "A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc(
 */
  __pyx_k_tuple_21 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_21));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeRemoved));
  PyTuple_SET_ITEM(__pyx_k_tuple_21, 0, ((PyObject *)__pyx_n_s__NodeRemoved));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeRemoved));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_21));
  __pyx_k_tuple_23 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_23));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_22));
  PyTuple_SET_ITEM(__pyx_k_tuple_23, 0, ((PyObject *)__pyx_kp_s_22));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_22));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_23));

  /* "openzwave.pyx":238
 *     EnumWithDoc('NodeRemoved').setDoc(
 *                          "A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc(             # <<<<<<<<<<<<<<
 *                          "Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc(
 */
  __pyx_k_tuple_24 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_24));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeProtocolInfo));
  PyTuple_SET_ITEM(__pyx_k_tuple_24, 0, ((PyObject *)__pyx_n_s__NodeProtocolInfo));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeProtocolInfo));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_24));
  __pyx_k_tuple_26 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_26));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_25));
  PyTuple_SET_ITEM(__pyx_k_tuple_26, 0, ((PyObject *)__pyx_kp_s_25));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_25));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_26));

  /* "openzwave.pyx":240
 *     EnumWithDoc('NodeProtocolInfo').setDoc(
 *                          "Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc(             # <<<<<<<<<<<<<<
 *                          "One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc(
 */
  __pyx_k_tuple_27 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_27));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeNaming));
  PyTuple_SET_ITEM(__pyx_k_tuple_27, 0, ((PyObject *)__pyx_n_s__NodeNaming));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeNaming));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_27));
  __pyx_k_tuple_29 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_29));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_28));
  PyTuple_SET_ITEM(__pyx_k_tuple_29, 0, ((PyObject *)__pyx_kp_s_28));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_28));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_29));

  /* "openzwave.pyx":242
 *     EnumWithDoc('NodeNaming').setDoc(
 *                          "One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc(             # <<<<<<<<<<<<<<
 *                          "A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc(
 */
  __pyx_k_tuple_30 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_30));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeEvent));
  PyTuple_SET_ITEM(__pyx_k_tuple_30, 0, ((PyObject *)__pyx_n_s__NodeEvent));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeEvent));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_30));
  __pyx_k_tuple_32 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_32));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_31));
  PyTuple_SET_ITEM(__pyx_k_tuple_32, 0, ((PyObject *)__pyx_kp_s_31));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_31));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_32));

  /* "openzwave.pyx":244
 *     EnumWithDoc('NodeEvent').setDoc(
 *                          "A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc(             # <<<<<<<<<<<<<<
 *                          "Polling of a node has been successfully turned off by a call to Manager::DisablePoll"),
 *     EnumWithDoc('PollingEnabled').setDoc(
 */
  __pyx_k_tuple_33 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_33));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__PollingDisabled));
  PyTuple_SET_ITEM(__pyx_k_tuple_33, 0, ((PyObject *)__pyx_n_s__PollingDisabled));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__PollingDisabled));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_33));
  __pyx_k_tuple_35 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_35));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_34));
  PyTuple_SET_ITEM(__pyx_k_tuple_35, 0, ((PyObject *)__pyx_kp_s_34));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_34));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_35));

  /* "openzwave.pyx":246
 *     EnumWithDoc('PollingDisabled').setDoc(
 *                          "Polling of a node has been successfully turned off by a call to Manager::DisablePoll"),
 *     EnumWithDoc('PollingEnabled').setDoc(             # <<<<<<<<<<<<<<
 *                          "Polling of a node has been successfully turned on by a call to Manager::EnablePoll"),
 *     EnumWithDoc('DriverReady').setDoc(
 */
  __pyx_k_tuple_36 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_36));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__PollingEnabled));
  PyTuple_SET_ITEM(__pyx_k_tuple_36, 0, ((PyObject *)__pyx_n_s__PollingEnabled));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__PollingEnabled));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_36));
  __pyx_k_tuple_38 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_38));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_37));
  PyTuple_SET_ITEM(__pyx_k_tuple_38, 0, ((PyObject *)__pyx_kp_s_37));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_37));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_38));

  /* "openzwave.pyx":248
 *     EnumWithDoc('PollingEnabled').setDoc(
 *                          "Polling of a node has been successfully turned on by a call to Manager::EnablePoll"),
 *     EnumWithDoc('DriverReady').setDoc(             # <<<<<<<<<<<<<<
 *                          "A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverReset').setDoc(
 */
  __pyx_k_tuple_39 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_39));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__DriverReady));
  PyTuple_SET_ITEM(__pyx_k_tuple_39, 0, ((PyObject *)__pyx_n_s__DriverReady));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__DriverReady));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_39));
  __pyx_k_tuple_41 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_41));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_40));
  PyTuple_SET_ITEM(__pyx_k_tuple_41, 0, ((PyObject *)__pyx_kp_s_40));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_40));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_41));

  /* "openzwave.pyx":250
 *     EnumWithDoc('DriverReady').setDoc(
 *                          "A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverReset').setDoc(             # <<<<<<<<<<<<<<
 *                          "All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('MsgComplete').setDoc(
 */
  __pyx_k_tuple_42 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_42));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__DriverReset));
  PyTuple_SET_ITEM(__pyx_k_tuple_42, 0, ((PyObject *)__pyx_n_s__DriverReset));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__DriverReset));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_42));
  __pyx_k_tuple_44 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_44));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_43));
  PyTuple_SET_ITEM(__pyx_k_tuple_44, 0, ((PyObject *)__pyx_kp_s_43));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_43));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_44));

  /* "openzwave.pyx":252
 *     EnumWithDoc('DriverReset').setDoc(
 *                          "All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('MsgComplete').setDoc(             # <<<<<<<<<<<<<<
 *                          "The last message that was sent is now complete."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc(
 */
  __pyx_k_tuple_45 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_45));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__MsgComplete));
  PyTuple_SET_ITEM(__pyx_k_tuple_45, 0, ((PyObject *)__pyx_n_s__MsgComplete));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__MsgComplete));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_45));
  __pyx_k_tuple_47 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_47));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_46));
  PyTuple_SET_ITEM(__pyx_k_tuple_47, 0, ((PyObject *)__pyx_kp_s_46));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_46));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_47));

  /* "openzwave.pyx":254
 *     EnumWithDoc('MsgComplete').setDoc(
 *                          "The last message that was sent is now complete."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc(             # <<<<<<<<<<<<<<
 *                          "The initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc(
 */
  __pyx_k_tuple_48 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_48));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeQueriesComplete));
  PyTuple_SET_ITEM(__pyx_k_tuple_48, 0, ((PyObject *)__pyx_n_s__NodeQueriesComplete));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeQueriesComplete));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_48));
  __pyx_k_tuple_50 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_50));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_49));
  PyTuple_SET_ITEM(__pyx_k_tuple_50, 0, ((PyObject *)__pyx_kp_s_49));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_49));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_50));

  /* "openzwave.pyx":256
 *     EnumWithDoc('NodeQueriesComplete').setDoc(
 *                          "The initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc(             # <<<<<<<<<<<<<<
 *                          "All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc(
 */
  __pyx_k_tuple_51 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_51));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__AwakeNodesQueried));
  PyTuple_SET_ITEM(__pyx_k_tuple_51, 0, ((PyObject *)__pyx_n_s__AwakeNodesQueried));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__AwakeNodesQueried));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_51));
  __pyx_k_tuple_53 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_53));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_52));
  PyTuple_SET_ITEM(__pyx_k_tuple_53, 0, ((PyObject *)__pyx_kp_s_52));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_52));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_53));

  /* "openzwave.pyx":258
 *     EnumWithDoc('AwakeNodesQueried').setDoc(
 *                          "All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc(             # <<<<<<<<<<<<<<
 *                          "All nodes have been queried, so client application can expected complete data."),
 *     ]
 */
  __pyx_k_tuple_54 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_54)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_54));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__AllNodesQueried));
  PyTuple_SET_ITEM(__pyx_k_tuple_54, 0, ((PyObject *)__pyx_n_s__AllNodesQueried));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__AllNodesQueried));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_54));
  __pyx_k_tuple_56 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_56));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_55));
  PyTuple_SET_ITEM(__pyx_k_tuple_56, 0, ((PyObject *)__pyx_kp_s_55));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_55));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_56));

  /* "openzwave.pyx":263
 * 
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc(  "The 'level' as controlled by basic commands.  Usually duplicated by another command class."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 */
  __pyx_k_tuple_57 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_57));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Basic));
  PyTuple_SET_ITEM(__pyx_k_tuple_57, 0, ((PyObject *)__pyx_n_s__Basic));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Basic));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_57));
  __pyx_k_tuple_59 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_59));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_58));
  PyTuple_SET_ITEM(__pyx_k_tuple_59, 0, ((PyObject *)__pyx_kp_s_58));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_58));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_59));

  /* "openzwave.pyx":264
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc(  "The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc( "Values of significance only to users who understand the Z-Wave protocol"),
 */
  __pyx_k_tuple_60 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_60));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__User));
  PyTuple_SET_ITEM(__pyx_k_tuple_60, 0, ((PyObject *)__pyx_n_s__User));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__User));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_60));
  __pyx_k_tuple_62 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_62));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_61));
  PyTuple_SET_ITEM(__pyx_k_tuple_62, 0, ((PyObject *)__pyx_kp_s_61));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_61));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_62));

  /* "openzwave.pyx":265
 *     EnumWithDoc('Basic').setDoc(  "The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('System').setDoc( "Values of significance only to users who understand the Z-Wave protocol"),
 *     ]
 */
  __pyx_k_tuple_63 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_63));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Config));
  PyTuple_SET_ITEM(__pyx_k_tuple_63, 0, ((PyObject *)__pyx_n_s__Config));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Config));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_63));
  __pyx_k_tuple_65 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_65)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_65));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_64));
  PyTuple_SET_ITEM(__pyx_k_tuple_65, 0, ((PyObject *)__pyx_kp_s_64));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_64));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_65));

  /* "openzwave.pyx":266
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc( "Values of significance only to users who understand the Z-Wave protocol"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_k_tuple_66 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_66));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__System));
  PyTuple_SET_ITEM(__pyx_k_tuple_66, 0, ((PyObject *)__pyx_n_s__System));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__System));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_66));
  __pyx_k_tuple_68 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_68));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_67));
  PyTuple_SET_ITEM(__pyx_k_tuple_68, 0, ((PyObject *)__pyx_kp_s_67));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_67));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_68));

  /* "openzwave.pyx":270
 * 
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc(     "Boolean, true or false"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 */
  __pyx_k_tuple_69 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_69));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Bool));
  PyTuple_SET_ITEM(__pyx_k_tuple_69, 0, ((PyObject *)__pyx_n_s__Bool));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Bool));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_69));
  __pyx_k_tuple_71 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_71));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_70));
  PyTuple_SET_ITEM(__pyx_k_tuple_71, 0, ((PyObject *)__pyx_kp_s_70));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_70));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_71));

  /* "openzwave.pyx":271
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc(     "Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 */
  __pyx_k_tuple_72 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_72)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_72));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Byte));
  PyTuple_SET_ITEM(__pyx_k_tuple_72, 0, ((PyObject *)__pyx_n_s__Byte));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Byte));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_72));
  __pyx_k_tuple_74 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_74)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_74));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_73));
  PyTuple_SET_ITEM(__pyx_k_tuple_74, 0, ((PyObject *)__pyx_kp_s_73));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_73));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_74));

  /* "openzwave.pyx":272
 *     EnumWithDoc('Bool').setDoc(     "Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 */
  __pyx_k_tuple_75 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_75)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_75));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Decimal));
  PyTuple_SET_ITEM(__pyx_k_tuple_75, 0, ((PyObject *)__pyx_n_s__Decimal));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Decimal));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_75));
  __pyx_k_tuple_77 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_77)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_77));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_76));
  PyTuple_SET_ITEM(__pyx_k_tuple_77, 0, ((PyObject *)__pyx_kp_s_76));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_76));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_77));

  /* "openzwave.pyx":273
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 */
  __pyx_k_tuple_78 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_78));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Int));
  PyTuple_SET_ITEM(__pyx_k_tuple_78, 0, ((PyObject *)__pyx_n_s__Int));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Int));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_78));
  __pyx_k_tuple_80 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_80));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_79));
  PyTuple_SET_ITEM(__pyx_k_tuple_80, 0, ((PyObject *)__pyx_kp_s_79));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_79));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_80));

  /* "openzwave.pyx":274
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 */
  __pyx_k_tuple_81 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_81));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__List));
  PyTuple_SET_ITEM(__pyx_k_tuple_81, 0, ((PyObject *)__pyx_n_s__List));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__List));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_81));
  __pyx_k_tuple_83 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_83)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_83));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_82));
  PyTuple_SET_ITEM(__pyx_k_tuple_83, 0, ((PyObject *)__pyx_kp_s_82));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_82));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_83));

  /* "openzwave.pyx":275
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 *     EnumWithDoc('String').setDoc(   "Text string"),
 */
  __pyx_k_tuple_84 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_84)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_84));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Schedule));
  PyTuple_SET_ITEM(__pyx_k_tuple_84, 0, ((PyObject *)__pyx_n_s__Schedule));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Schedule));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_84));
  __pyx_k_tuple_86 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_86)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_86));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_85));
  PyTuple_SET_ITEM(__pyx_k_tuple_86, 0, ((PyObject *)__pyx_kp_s_85));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_85));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_86));

  /* "openzwave.pyx":276
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('String').setDoc(   "Text string"),
 *     EnumWithDoc('Button').setDoc(   "A write-only value that is the equivalent of pressing a button to send a command to a device"),
 */
  __pyx_k_tuple_87 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_87)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_87));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Short));
  PyTuple_SET_ITEM(__pyx_k_tuple_87, 0, ((PyObject *)__pyx_n_s__Short));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Short));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_87));
  __pyx_k_tuple_89 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_89)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_89));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_88));
  PyTuple_SET_ITEM(__pyx_k_tuple_89, 0, ((PyObject *)__pyx_kp_s_88));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_88));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_89));

  /* "openzwave.pyx":277
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 *     EnumWithDoc('String').setDoc(   "Text string"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Button').setDoc(   "A write-only value that is the equivalent of pressing a button to send a command to a device"),
 *     ]
 */
  __pyx_k_tuple_90 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_90)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_90));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__String));
  PyTuple_SET_ITEM(__pyx_k_tuple_90, 0, ((PyObject *)__pyx_n_s__String));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__String));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_90));
  __pyx_k_tuple_92 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_92)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_92));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_91));
  PyTuple_SET_ITEM(__pyx_k_tuple_92, 0, ((PyObject *)__pyx_kp_s_91));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_91));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_92));

  /* "openzwave.pyx":278
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 *     EnumWithDoc('String').setDoc(   "Text string"),
 *     EnumWithDoc('Button').setDoc(   "A write-only value that is the equivalent of pressing a button to send a command to a device"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_k_tuple_93 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_93)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_93));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Button));
  PyTuple_SET_ITEM(__pyx_k_tuple_93, 0, ((PyObject *)__pyx_n_s__Button));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Button));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_93));
  __pyx_k_tuple_95 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_95)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_95));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_94));
  PyTuple_SET_ITEM(__pyx_k_tuple_95, 0, ((PyObject *)__pyx_kp_s_94));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_94));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_95));

  /* "openzwave.pyx":456
 *     }
 * 
 *     CALLBACK_DESC = ('value added','value removed','value changed','groups changed','new node','node added',             # <<<<<<<<<<<<<<
 *                      'node removed','node protocol info','node naming','node event','polling disabled',
 *                      'polling enabled','driver ready','driver reset','message complete','node queries complete',
 */
  __pyx_k_tuple_190 = PyTuple_New(18); if (unlikely(!__pyx_k_tuple_190)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_190));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_172));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 0, ((PyObject *)__pyx_kp_s_172));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_172));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_173));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 1, ((PyObject *)__pyx_kp_s_173));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_173));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_174));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 2, ((PyObject *)__pyx_kp_s_174));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_174));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_175));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 3, ((PyObject *)__pyx_kp_s_175));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_175));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_176));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 4, ((PyObject *)__pyx_kp_s_176));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_176));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_177));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 5, ((PyObject *)__pyx_kp_s_177));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_177));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_178));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 6, ((PyObject *)__pyx_kp_s_178));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_178));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_179));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 7, ((PyObject *)__pyx_kp_s_179));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_179));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_180));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 8, ((PyObject *)__pyx_kp_s_180));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_180));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_181));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 9, ((PyObject *)__pyx_kp_s_181));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_181));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_182));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 10, ((PyObject *)__pyx_kp_s_182));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_182));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_183));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 11, ((PyObject *)__pyx_kp_s_183));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_183));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_184));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 12, ((PyObject *)__pyx_kp_s_184));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_184));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_185));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 13, ((PyObject *)__pyx_kp_s_185));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_185));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_186));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 14, ((PyObject *)__pyx_kp_s_186));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_186));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_187));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 15, ((PyObject *)__pyx_kp_s_187));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_187));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_188));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 16, ((PyObject *)__pyx_kp_s_188));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_188));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_189));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 17, ((PyObject *)__pyx_kp_s_189));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_189));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_190));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  #if PY_VERSION_HEX < 0x02040000
  if (unlikely(__Pyx_Py23SetsImport() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_32 = PyInt_FromLong(32); if (unlikely(!__pyx_int_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_33 = PyInt_FromLong(33); if (unlikely(!__pyx_int_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_34 = PyInt_FromLong(34); if (unlikely(!__pyx_int_34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_35 = PyInt_FromLong(35); if (unlikely(!__pyx_int_35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_36 = PyInt_FromLong(36); if (unlikely(!__pyx_int_36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_37 = PyInt_FromLong(37); if (unlikely(!__pyx_int_37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_38 = PyInt_FromLong(38); if (unlikely(!__pyx_int_38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_39 = PyInt_FromLong(39); if (unlikely(!__pyx_int_39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_40 = PyInt_FromLong(40); if (unlikely(!__pyx_int_40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_41 = PyInt_FromLong(41); if (unlikely(!__pyx_int_41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_42 = PyInt_FromLong(42); if (unlikely(!__pyx_int_42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_43 = PyInt_FromLong(43); if (unlikely(!__pyx_int_43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_44 = PyInt_FromLong(44); if (unlikely(!__pyx_int_44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_45 = PyInt_FromLong(45); if (unlikely(!__pyx_int_45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_46 = PyInt_FromLong(46); if (unlikely(!__pyx_int_46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_47 = PyInt_FromLong(47); if (unlikely(!__pyx_int_47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_48 = PyInt_FromLong(48); if (unlikely(!__pyx_int_48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_49 = PyInt_FromLong(49); if (unlikely(!__pyx_int_49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_50 = PyInt_FromLong(50); if (unlikely(!__pyx_int_50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_51 = PyInt_FromLong(51); if (unlikely(!__pyx_int_51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_52 = PyInt_FromLong(52); if (unlikely(!__pyx_int_52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_53 = PyInt_FromLong(53); if (unlikely(!__pyx_int_53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_56 = PyInt_FromLong(56); if (unlikely(!__pyx_int_56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_60 = PyInt_FromLong(60); if (unlikely(!__pyx_int_60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_61 = PyInt_FromLong(61); if (unlikely(!__pyx_int_61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_62 = PyInt_FromLong(62); if (unlikely(!__pyx_int_62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_64 = PyInt_FromLong(64); if (unlikely(!__pyx_int_64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_66 = PyInt_FromLong(66); if (unlikely(!__pyx_int_66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_67 = PyInt_FromLong(67); if (unlikely(!__pyx_int_67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_68 = PyInt_FromLong(68); if (unlikely(!__pyx_int_68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_69 = PyInt_FromLong(69); if (unlikely(!__pyx_int_69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_70 = PyInt_FromLong(70); if (unlikely(!__pyx_int_70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_71 = PyInt_FromLong(71); if (unlikely(!__pyx_int_71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_76 = PyInt_FromLong(76); if (unlikely(!__pyx_int_76)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_78 = PyInt_FromLong(78); if (unlikely(!__pyx_int_78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_80 = PyInt_FromLong(80); if (unlikely(!__pyx_int_80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_81 = PyInt_FromLong(81); if (unlikely(!__pyx_int_81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_96 = PyInt_FromLong(96); if (unlikely(!__pyx_int_96)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_98 = PyInt_FromLong(98); if (unlikely(!__pyx_int_98)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_99 = PyInt_FromLong(99); if (unlikely(!__pyx_int_99)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_112 = PyInt_FromLong(112); if (unlikely(!__pyx_int_112)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_113 = PyInt_FromLong(113); if (unlikely(!__pyx_int_113)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_114 = PyInt_FromLong(114); if (unlikely(!__pyx_int_114)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_115 = PyInt_FromLong(115); if (unlikely(!__pyx_int_115)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_117 = PyInt_FromLong(117); if (unlikely(!__pyx_int_117)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_118 = PyInt_FromLong(118); if (unlikely(!__pyx_int_118)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_119 = PyInt_FromLong(119); if (unlikely(!__pyx_int_119)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_122 = PyInt_FromLong(122); if (unlikely(!__pyx_int_122)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_123 = PyInt_FromLong(123); if (unlikely(!__pyx_int_123)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_124 = PyInt_FromLong(124); if (unlikely(!__pyx_int_124)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_125 = PyInt_FromLong(125); if (unlikely(!__pyx_int_125)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_128 = PyInt_FromLong(128); if (unlikely(!__pyx_int_128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_129 = PyInt_FromLong(129); if (unlikely(!__pyx_int_129)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_130 = PyInt_FromLong(130); if (unlikely(!__pyx_int_130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_132 = PyInt_FromLong(132); if (unlikely(!__pyx_int_132)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_133 = PyInt_FromLong(133); if (unlikely(!__pyx_int_133)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_134 = PyInt_FromLong(134); if (unlikely(!__pyx_int_134)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_135 = PyInt_FromLong(135); if (unlikely(!__pyx_int_135)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_136 = PyInt_FromLong(136); if (unlikely(!__pyx_int_136)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_137 = PyInt_FromLong(137); if (unlikely(!__pyx_int_137)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_138 = PyInt_FromLong(138); if (unlikely(!__pyx_int_138)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_139 = PyInt_FromLong(139); if (unlikely(!__pyx_int_139)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_140 = PyInt_FromLong(140); if (unlikely(!__pyx_int_140)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_141 = PyInt_FromLong(141); if (unlikely(!__pyx_int_141)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_142 = PyInt_FromLong(142); if (unlikely(!__pyx_int_142)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_143 = PyInt_FromLong(143); if (unlikely(!__pyx_int_143)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_144 = PyInt_FromLong(144); if (unlikely(!__pyx_int_144)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_145 = PyInt_FromLong(145); if (unlikely(!__pyx_int_145)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_146 = PyInt_FromLong(146); if (unlikely(!__pyx_int_146)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_147 = PyInt_FromLong(147); if (unlikely(!__pyx_int_147)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_148 = PyInt_FromLong(148); if (unlikely(!__pyx_int_148)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_149 = PyInt_FromLong(149); if (unlikely(!__pyx_int_149)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_150 = PyInt_FromLong(150); if (unlikely(!__pyx_int_150)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_151 = PyInt_FromLong(151); if (unlikely(!__pyx_int_151)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_152 = PyInt_FromLong(152); if (unlikely(!__pyx_int_152)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_153 = PyInt_FromLong(153); if (unlikely(!__pyx_int_153)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_154 = PyInt_FromLong(154); if (unlikely(!__pyx_int_154)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_155 = PyInt_FromLong(155); if (unlikely(!__pyx_int_155)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_156 = PyInt_FromLong(156); if (unlikely(!__pyx_int_156)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_157 = PyInt_FromLong(157); if (unlikely(!__pyx_int_157)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_158 = PyInt_FromLong(158); if (unlikely(!__pyx_int_158)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_239 = PyInt_FromLong(239); if (unlikely(!__pyx_int_239)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_240 = PyInt_FromLong(240); if (unlikely(!__pyx_int_240)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initopenzwave(void); /*proto*/
PyMODINIT_FUNC initopenzwave(void)
#else
PyMODINIT_FUNC PyInit_openzwave(void); /*proto*/
PyMODINIT_FUNC PyInit_openzwave(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_openzwave(void)");
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("openzwave"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_openzwave) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_9openzwave_PyOptions) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyOptions", (PyObject *)&__pyx_type_9openzwave_PyOptions) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9openzwave_PyOptions = &__pyx_type_9openzwave_PyOptions;
  if (PyType_Ready(&__pyx_type_9openzwave_PyManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyManager", (PyObject *)&__pyx_type_9openzwave_PyManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9openzwave_PyManager = &__pyx_type_9openzwave_PyManager;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "openzwave.pyx":219
 *         return self.options.Lock()
 * 
 * class EnumWithDoc(str):             # <<<<<<<<<<<<<<
 *     def setDoc(self, doc):
 *         self.__doc__ = doc
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

  /* "openzwave.pyx":220
 * 
 * class EnumWithDoc(str):
 *     def setDoc(self, doc):             # <<<<<<<<<<<<<<
 *         self.__doc__ = doc
 *         return self
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_9openzwave_11EnumWithDoc_setDoc, NULL, __pyx_n_s__openzwave); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__setDoc, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openzwave.pyx":219
 *         return self.options.Lock()
 * 
 * class EnumWithDoc(str):             # <<<<<<<<<<<<<<
 *     def setDoc(self, doc):
 *         self.__doc__ = doc
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)((PyObject*)(&PyString_Type))));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)((PyObject*)(&PyString_Type))));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyString_Type))));
  __pyx_t_3 = __Pyx_CreateClass(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_1), __pyx_n_s__EnumWithDoc, __pyx_n_s__openzwave); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EnumWithDoc, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "openzwave.pyx":225
 * 
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's list. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueRemoved').setDoc(
 *                          "A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_3), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_5), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":226
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's list. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
 *     EnumWithDoc('ValueRemoved').setDoc(             # <<<<<<<<<<<<<<
 *                          "A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_6), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_8), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":228
 *     EnumWithDoc('ValueRemoved').setDoc(
 *                          "A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc(             # <<<<<<<<<<<<<<
 *                          "A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_9), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_11), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":230
 *     EnumWithDoc('ValueChanged').setDoc(
 *                          "A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc(             # <<<<<<<<<<<<<<
 *                          "The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_12), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_14), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":232
 *     EnumWithDoc('Group').setDoc(
 *                          "The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc(             # <<<<<<<<<<<<<<
 *                          "A new node has been found (not already stored in zwcfg*.xml file)"),
 *     EnumWithDoc('NodeAdded').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_15), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_17), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":234
 *     EnumWithDoc('NodeNew').setDoc(
 *                          "A new node has been found (not already stored in zwcfg*.xml file)"),
 *     EnumWithDoc('NodeAdded').setDoc(             # <<<<<<<<<<<<<<
 *                          "A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_18), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_20), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":236
 *     EnumWithDoc('NodeAdded').setDoc(
 *                          "A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc(             # <<<<<<<<<<<<<<
 *                          "A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_21), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_8, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_23), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":238
 *     EnumWithDoc('NodeRemoved').setDoc(
 *                          "A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc(             # <<<<<<<<<<<<<<
 *                          "Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_24), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_9, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_26), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":240
 *     EnumWithDoc('NodeProtocolInfo').setDoc(
 *                          "Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc(             # <<<<<<<<<<<<<<
 *                          "One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_27), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_10, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_29), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":242
 *     EnumWithDoc('NodeNaming').setDoc(
 *                          "One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc(             # <<<<<<<<<<<<<<
 *                          "A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_30), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_11, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_32), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":244
 *     EnumWithDoc('NodeEvent').setDoc(
 *                          "A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc(             # <<<<<<<<<<<<<<
 *                          "Polling of a node has been successfully turned off by a call to Manager::DisablePoll"),
 *     EnumWithDoc('PollingEnabled').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_33), NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_12, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_35), NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":246
 *     EnumWithDoc('PollingDisabled').setDoc(
 *                          "Polling of a node has been successfully turned off by a call to Manager::DisablePoll"),
 *     EnumWithDoc('PollingEnabled').setDoc(             # <<<<<<<<<<<<<<
 *                          "Polling of a node has been successfully turned on by a call to Manager::EnablePoll"),
 *     EnumWithDoc('DriverReady').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_13 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_36), NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_13, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_38), NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":248
 *     EnumWithDoc('PollingEnabled').setDoc(
 *                          "Polling of a node has been successfully turned on by a call to Manager::EnablePoll"),
 *     EnumWithDoc('DriverReady').setDoc(             # <<<<<<<<<<<<<<
 *                          "A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverReset').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_14 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_39), NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_14, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_41), NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":250
 *     EnumWithDoc('DriverReady').setDoc(
 *                          "A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverReset').setDoc(             # <<<<<<<<<<<<<<
 *                          "All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('MsgComplete').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_15 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_42), NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_15, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_44), NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":252
 *     EnumWithDoc('DriverReset').setDoc(
 *                          "All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('MsgComplete').setDoc(             # <<<<<<<<<<<<<<
 *                          "The last message that was sent is now complete."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_16 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_45), NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_16, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_47), NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":254
 *     EnumWithDoc('MsgComplete').setDoc(
 *                          "The last message that was sent is now complete."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc(             # <<<<<<<<<<<<<<
 *                          "The initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_17 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_48), NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_17, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_50), NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":256
 *     EnumWithDoc('NodeQueriesComplete').setDoc(
 *                          "The initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc(             # <<<<<<<<<<<<<<
 *                          "All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc(
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_51), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_18, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_53), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":258
 *     EnumWithDoc('AwakeNodesQueried').setDoc(
 *                          "All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc(             # <<<<<<<<<<<<<<
 *                          "All nodes have been queried, so client application can expected complete data."),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_54), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_19, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_56), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(18); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_13);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_14);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_15);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_16);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_17);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyNotifications, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "openzwave.pyx":263
 * 
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc(  "The 'level' as controlled by basic commands.  Usually duplicated by another command class."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_57), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_19, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_59), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":264
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc(  "The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc( "Values of significance only to users who understand the Z-Wave protocol"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_60), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_18, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_62), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":265
 *     EnumWithDoc('Basic').setDoc(  "The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('System').setDoc( "Values of significance only to users who understand the Z-Wave protocol"),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_17 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_63), NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_17, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_65), NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":266
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc( "Values of significance only to users who understand the Z-Wave protocol"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_16 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_66), NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_16, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_68), NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_17);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_16);
  __pyx_t_19 = 0;
  __pyx_t_18 = 0;
  __pyx_t_17 = 0;
  __pyx_t_16 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyGenres, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "openzwave.pyx":270
 * 
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc(     "Boolean, true or false"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_16 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_69), NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_16, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_71), NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":271
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc(     "Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_17 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_72), NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_17, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_74), NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":272
 *     EnumWithDoc('Bool').setDoc(     "Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_75), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_18, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_77), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":273
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_78), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_19, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_80), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":274
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_15 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_81), NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_15, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_83), NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":275
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 *     EnumWithDoc('String').setDoc(   "Text string"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_14 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_84), NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_14, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_86), NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":276
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('String').setDoc(   "Text string"),
 *     EnumWithDoc('Button').setDoc(   "A write-only value that is the equivalent of pressing a button to send a command to a device"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_13 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_87), NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_13, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_89), NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":277
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 *     EnumWithDoc('String').setDoc(   "Text string"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Button').setDoc(   "A write-only value that is the equivalent of pressing a button to send a command to a device"),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_90), NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_12, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_92), NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openzwave.pyx":278
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 *     EnumWithDoc('String').setDoc(   "Text string"),
 *     EnumWithDoc('Button').setDoc(   "A write-only value that is the equivalent of pressing a button to send a command to a device"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_93), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_11, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_95), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_16);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_17);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_15);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_14);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_13);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_15 = 0;
  __pyx_t_14 = 0;
  __pyx_t_13 = 0;
  __pyx_t_12 = 0;
  __pyx_t_11 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyValueTypes, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "openzwave.pyx":369
 * sleeping) have been polled, an "AllNodesQueried" notification is sent.]
 *     '''
 *     COMMAND_CLASS_DESC = {             # <<<<<<<<<<<<<<
 *         0x00: 'COMMAND_CLASS_NO_OPERATION',
 *         0x20: 'COMMAND_CLASS_BASIC',
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_0, ((PyObject *)__pyx_n_s_96)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_32, ((PyObject *)__pyx_n_s__COMMAND_CLASS_BASIC)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_33, ((PyObject *)__pyx_n_s_97)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_34, ((PyObject *)__pyx_n_s_98)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_35, ((PyObject *)__pyx_n_s_99)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_36, ((PyObject *)__pyx_n_s_100)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_37, ((PyObject *)__pyx_n_s_101)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_38, ((PyObject *)__pyx_n_s_102)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_39, ((PyObject *)__pyx_n_s_103)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_40, ((PyObject *)__pyx_n_s_104)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_41, ((PyObject *)__pyx_n_s_105)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_42, ((PyObject *)__pyx_n_s_106)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_43, ((PyObject *)__pyx_n_s_107)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_44, ((PyObject *)__pyx_n_s_108)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_45, ((PyObject *)__pyx_n_s_109)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_46, ((PyObject *)__pyx_n_s_110)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_47, ((PyObject *)__pyx_n_s_111)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_48, ((PyObject *)__pyx_n_s_112)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_49, ((PyObject *)__pyx_n_s_113)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_50, ((PyObject *)__pyx_n_s__COMMAND_CLASS_METER)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_51, ((PyObject *)__pyx_n_s_114)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_52, ((PyObject *)__pyx_n_s_115)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_53, ((PyObject *)__pyx_n_s_116)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_60, ((PyObject *)__pyx_n_s_117)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_61, ((PyObject *)__pyx_n_s_118)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_62, ((PyObject *)__pyx_n_s_119)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_56, ((PyObject *)__pyx_n_s_120)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_64, ((PyObject *)__pyx_n_s_121)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_66, ((PyObject *)__pyx_n_s_122)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_67, ((PyObject *)__pyx_n_s_123)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_68, ((PyObject *)__pyx_n_s_124)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_69, ((PyObject *)__pyx_n_s_125)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_70, ((PyObject *)__pyx_n_s_126)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_71, ((PyObject *)__pyx_n_s_127)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_76, ((PyObject *)__pyx_n_s_128)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_78, ((PyObject *)__pyx_n_s_129)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_80, ((PyObject *)__pyx_n_s_130)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_81, ((PyObject *)__pyx_n_s_131)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_96, ((PyObject *)__pyx_n_s_132)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_98, ((PyObject *)__pyx_n_s_133)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_99, ((PyObject *)__pyx_n_s_134)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_112, ((PyObject *)__pyx_n_s_135)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_113, ((PyObject *)__pyx_n_s__COMMAND_CLASS_ALARM)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_114, ((PyObject *)__pyx_n_s_136)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_115, ((PyObject *)__pyx_n_s_137)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_117, ((PyObject *)__pyx_n_s_138)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_118, ((PyObject *)__pyx_n_s__COMMAND_CLASS_LOCK)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_119, ((PyObject *)__pyx_n_s_139)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_122, ((PyObject *)__pyx_n_s_140)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_123, ((PyObject *)__pyx_n_s_141)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_124, ((PyObject *)__pyx_n_s_142)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_125, ((PyObject *)__pyx_n_s_143)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_128, ((PyObject *)__pyx_n_s_144)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_129, ((PyObject *)__pyx_n_s__COMMAND_CLASS_CLOCK)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_130, ((PyObject *)__pyx_n_s__COMMAND_CLASS_HAIL)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_132, ((PyObject *)__pyx_n_s_145)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_133, ((PyObject *)__pyx_n_s_146)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_134, ((PyObject *)__pyx_n_s_147)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_135, ((PyObject *)__pyx_n_s_148)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_136, ((PyObject *)__pyx_n_s_149)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_137, ((PyObject *)__pyx_n_s_150)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_138, ((PyObject *)__pyx_n_s__COMMAND_CLASS_TIME)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_139, ((PyObject *)__pyx_n_s_151)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_140, ((PyObject *)__pyx_n_s_152)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_141, ((PyObject *)__pyx_n_s_153)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_142, ((PyObject *)__pyx_n_s_154)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_143, ((PyObject *)__pyx_n_s_155)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_144, ((PyObject *)__pyx_n_s_156)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_145, ((PyObject *)__pyx_n_s_157)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_146, ((PyObject *)__pyx_n_s_158)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_147, ((PyObject *)__pyx_n_s_159)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_148, ((PyObject *)__pyx_n_s_160)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_149, ((PyObject *)__pyx_n_s_161)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_150, ((PyObject *)__pyx_n_s_162)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_151, ((PyObject *)__pyx_n_s_163)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_152, ((PyObject *)__pyx_n_s_164)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_153, ((PyObject *)__pyx_n_s_165)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_154, ((PyObject *)__pyx_n_s_166)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_155, ((PyObject *)__pyx_n_s_167)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_156, ((PyObject *)__pyx_n_s_168)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_157, ((PyObject *)__pyx_n_s_169)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_158, ((PyObject *)__pyx_n_s_170)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_239, ((PyObject *)__pyx_n_s__COMMAND_CLASS_MARK)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_240, ((PyObject *)__pyx_n_s_171)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9openzwave_PyManager->tp_dict, __pyx_n_s__COMMAND_CLASS_DESC, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9openzwave_PyManager);

  /* "openzwave.pyx":456
 *     }
 * 
 *     CALLBACK_DESC = ('value added','value removed','value changed','groups changed','new node','node added',             # <<<<<<<<<<<<<<
 *                      'node removed','node protocol info','node naming','node event','polling disabled',
 *                      'polling enabled','driver ready','driver reset','message complete','node queries complete',
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9openzwave_PyManager->tp_dict, __pyx_n_s__CALLBACK_DESC, ((PyObject *)__pyx_k_tuple_190)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_9openzwave_PyManager);

  /* "openzwave.pyx":1
 * from cython.operator cimport dereference as deref             # <<<<<<<<<<<<<<
 * from libcpp.map cimport map, pair
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  if (__pyx_m) {
    __Pyx_AddTraceback("init openzwave", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init openzwave");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}


static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    /* cause is unused */
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    if (cause) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        if (!value) {
            value = PyObject_CallObject(type, NULL);
        }
        PyException_SetCause(value, fixed_cause);
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases) {
    PyObject *metaclass;
    /* Default metaclass */
#if PY_MAJOR_VERSION < 3
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = PyObject_GetAttrString(base, (char *)"__class__");
        if (!metaclass) {
            PyErr_Clear();
            metaclass = (PyObject*) Py_TYPE(base);
        }
    } else {
        metaclass = (PyObject *) &PyClass_Type;
    }
#else
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = (PyObject*) Py_TYPE(base);
    } else {
        metaclass = (PyObject *) &PyType_Type;
    }
#endif
    Py_INCREF(metaclass);
    return metaclass;
}

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname) {
    PyObject *result;
    PyObject *metaclass;

    if (PyDict_SetItemString(dict, "__module__", modname) < 0)
        return NULL;

    /* Python2 __metaclass__ */
    metaclass = PyDict_GetItemString(dict, "__metaclass__");
    if (metaclass) {
        Py_INCREF(metaclass);
    } else {
        metaclass = __Pyx_FindPy2Metaclass(bases);
    }
    result = PyObject_CallFunctionObjArgs(metaclass, name, bases, dict, NULL);
    Py_DECREF(metaclass);
    return result;
}


static PyObject *__pyx_binding_PyCFunctionType_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module) {
    __pyx_binding_PyCFunctionType_object *op = PyObject_GC_New(__pyx_binding_PyCFunctionType_object, __pyx_binding_PyCFunctionType);
    if (op == NULL)
        return NULL;
    op->func.m_ml = ml;
    Py_XINCREF(self);
    op->func.m_self = self;
    Py_XINCREF(module);
    op->func.m_module = module;
    PyObject_GC_Track(op);
    return (PyObject *)op;
}

static void __pyx_binding_PyCFunctionType_dealloc(__pyx_binding_PyCFunctionType_object *m) {
    PyObject_GC_UnTrack(m);
    Py_XDECREF(m->func.m_self);
    Py_XDECREF(m->func.m_module);
    PyObject_GC_Del(m);
}

static PyObject *__pyx_binding_PyCFunctionType_descr_get(PyObject *func, PyObject *obj, PyObject *type) {
    if (obj == Py_None)
            obj = NULL;
    return PyMethod_New(func, obj, type);
}

static int __pyx_binding_PyCFunctionType_init(void) {
    __pyx_binding_PyCFunctionType_type = PyCFunction_Type;
    __pyx_binding_PyCFunctionType_type.tp_name = __Pyx_NAMESTR("cython_binding_builtin_function_or_method");
    __pyx_binding_PyCFunctionType_type.tp_dealloc = (destructor)__pyx_binding_PyCFunctionType_dealloc;
    __pyx_binding_PyCFunctionType_type.tp_descr_get = __pyx_binding_PyCFunctionType_descr_get;
    if (PyType_Ready(&__pyx_binding_PyCFunctionType_type) < 0) {
        return -1;
    }
    __pyx_binding_PyCFunctionType = &__pyx_binding_PyCFunctionType_type;
    return 0;

}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
    if (s1 == s2) {   /* as done by PyObject_RichCompareBool(); also catches the (interned) empty string */
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        if (PyBytes_GET_SIZE(s1) != PyBytes_GET_SIZE(s2)) {
            return (equals == Py_NE);
        } else if (PyBytes_GET_SIZE(s1) == 1) {
            if (equals == Py_EQ)
                return (PyBytes_AS_STRING(s1)[0] == PyBytes_AS_STRING(s2)[0]);
            else
                return (PyBytes_AS_STRING(s1)[0] != PyBytes_AS_STRING(s2)[0]);
        } else {
            int result = memcmp(PyBytes_AS_STRING(s1), PyBytes_AS_STRING(s2), (size_t)PyBytes_GET_SIZE(s1));
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
    if (s1 == s2) {   /* as done by PyObject_RichCompareBool(); also catches the (interned) empty string */
        return (equals == Py_EQ);
    } else if (PyUnicode_CheckExact(s1) & PyUnicode_CheckExact(s2)) {
        if (PyUnicode_GET_SIZE(s1) != PyUnicode_GET_SIZE(s2)) {
            return (equals == Py_NE);
        } else if (PyUnicode_GET_SIZE(s1) == 1) {
            if (equals == Py_EQ)
                return (PyUnicode_AS_UNICODE(s1)[0] == PyUnicode_AS_UNICODE(s2)[0]);
            else
                return (PyUnicode_AS_UNICODE(s1)[0] != PyUnicode_AS_UNICODE(s2)[0]);
        } else {
            int result = PyUnicode_Compare(s1, s2);
            if ((result == -1) && unlikely(PyErr_Occurred()))
                return -1;
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyUnicode_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyUnicode_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
